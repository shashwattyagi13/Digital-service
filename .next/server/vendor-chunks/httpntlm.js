/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/httpntlm";
exports.ids = ["vendor-chunks/httpntlm"];
exports.modules = {

/***/ "(rsc)/./node_modules/httpntlm/ntlm.js":
/*!***************************************!*\
  !*** ./node_modules/httpntlm/ntlm.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var crypto = __webpack_require__(/*! crypto */ \"crypto\");\n\nvar flags = {\n\tNTLM_NegotiateUnicode                :  0x00000001,\n\tNTLM_NegotiateOEM                    :  0x00000002,\n\tNTLM_RequestTarget                   :  0x00000004,\n\tNTLM_Unknown9                        :  0x00000008,\n\tNTLM_NegotiateSign                   :  0x00000010,\n\tNTLM_NegotiateSeal                   :  0x00000020,\n\tNTLM_NegotiateDatagram               :  0x00000040,\n\tNTLM_NegotiateLanManagerKey          :  0x00000080,\n\tNTLM_Unknown8                        :  0x00000100,\n\tNTLM_NegotiateNTLM                   :  0x00000200,\n\tNTLM_NegotiateNTOnly                 :  0x00000400,\n\tNTLM_Anonymous                       :  0x00000800,\n\tNTLM_NegotiateOemDomainSupplied      :  0x00001000,\n\tNTLM_NegotiateOemWorkstationSupplied :  0x00002000,\n\tNTLM_Unknown6                        :  0x00004000,\n\tNTLM_NegotiateAlwaysSign             :  0x00008000,\n\tNTLM_TargetTypeDomain                :  0x00010000,\n\tNTLM_TargetTypeServer                :  0x00020000,\n\tNTLM_TargetTypeShare                 :  0x00040000,\n\tNTLM_NegotiateExtendedSecurity       :  0x00080000,\n\tNTLM_NegotiateIdentify               :  0x00100000,\n\tNTLM_Unknown5                        :  0x00200000,\n\tNTLM_RequestNonNTSessionKey          :  0x00400000,\n\tNTLM_NegotiateTargetInfo             :  0x00800000,\n\tNTLM_Unknown4                        :  0x01000000,\n\tNTLM_NegotiateVersion                :  0x02000000,\n\tNTLM_Unknown3                        :  0x04000000,\n\tNTLM_Unknown2                        :  0x08000000,\n\tNTLM_Unknown1                        :  0x10000000,\n\tNTLM_Negotiate128                    :  0x20000000,\n\tNTLM_NegotiateKeyExchange            :  0x40000000,\n\tNTLM_Negotiate56                     :  0x80000000\n};\nvar typeflags = {\n\tNTLM_TYPE1_FLAGS : \t  flags.NTLM_NegotiateUnicode\n\t\t\t\t\t\t+ flags.NTLM_NegotiateOEM\n\t\t\t\t\t\t+ flags.NTLM_RequestTarget\n\t\t\t\t\t\t+ flags.NTLM_NegotiateNTLM\n\t\t\t\t\t\t+ flags.NTLM_NegotiateOemDomainSupplied\n\t\t\t\t\t\t+ flags.NTLM_NegotiateOemWorkstationSupplied\n\t\t\t\t\t\t+ flags.NTLM_NegotiateAlwaysSign\n\t\t\t\t\t\t+ flags.NTLM_NegotiateExtendedSecurity\n\t\t\t\t\t\t+ flags.NTLM_NegotiateVersion\n\t\t\t\t\t\t+ flags.NTLM_Negotiate128\n\t\t\t\t\t\t+ flags.NTLM_Negotiate56,\n\n\tNTLM_TYPE2_FLAGS :    flags.NTLM_NegotiateUnicode\n\t\t\t\t\t\t+ flags.NTLM_RequestTarget\n\t\t\t\t\t\t+ flags.NTLM_NegotiateNTLM\n\t\t\t\t\t\t+ flags.NTLM_NegotiateAlwaysSign\n\t\t\t\t\t\t+ flags.NTLM_NegotiateExtendedSecurity\n\t\t\t\t\t\t+ flags.NTLM_NegotiateTargetInfo\n\t\t\t\t\t\t+ flags.NTLM_NegotiateVersion\n\t\t\t\t\t\t+ flags.NTLM_Negotiate128\n\t\t\t\t\t\t+ flags.NTLM_Negotiate56\n};\n\nfunction createType1Message(options){\n\tvar domain = escape(options.domain.toUpperCase());\n\tvar workstation = escape(options.workstation.toUpperCase());\n\tvar protocol = 'NTLMSSP\\0';\n\n\tvar BODY_LENGTH = 40;\n\n\tvar type1flags = typeflags.NTLM_TYPE1_FLAGS;\n\tif(!domain || domain === '')\n\t\ttype1flags = type1flags - flags.NTLM_NegotiateOemDomainSupplied;\n\n\tvar pos = 0;\n\tvar buf = new Buffer(BODY_LENGTH + domain.length + workstation.length);\n\n\n\tbuf.write(protocol, pos, protocol.length); pos += protocol.length; // protocol\n\tbuf.writeUInt32LE(1, pos); pos += 4;          // type 1\n\tbuf.writeUInt32LE(type1flags, pos); pos += 4; // TYPE1 flag\n\n\tbuf.writeUInt16LE(domain.length, pos); pos += 2; // domain length\n\tbuf.writeUInt16LE(domain.length, pos); pos += 2; // domain max length\n\tbuf.writeUInt32LE(BODY_LENGTH + workstation.length, pos); pos += 4; // domain buffer offset\n\n\tbuf.writeUInt16LE(workstation.length, pos); pos += 2; // workstation length\n\tbuf.writeUInt16LE(workstation.length, pos); pos += 2; // workstation max length\n\tbuf.writeUInt32LE(BODY_LENGTH, pos); pos += 4; // workstation buffer offset\n\n\tbuf.writeUInt8(5, pos); pos += 1;      //ProductMajorVersion\n\tbuf.writeUInt8(1, pos); pos += 1;      //ProductMinorVersion\n\tbuf.writeUInt16LE(2600, pos); pos += 2; //ProductBuild\n\n\tbuf.writeUInt8(0 , pos); pos += 1; //VersionReserved1\n\tbuf.writeUInt8(0 , pos); pos += 1; //VersionReserved2\n\tbuf.writeUInt8(0 , pos); pos += 1; //VersionReserved3\n\tbuf.writeUInt8(15, pos); pos += 1; //NTLMRevisionCurrent\n\n\tbuf.write(workstation, pos, workstation.length, 'ascii'); pos += workstation.length; // workstation string\n\tbuf.write(domain     , pos, domain.length     , 'ascii'); pos += domain.length;\n\n\treturn 'NTLM ' + buf.toString('base64');\n}\n\nfunction parseType2Message(rawmsg, callback){\n\tvar match = rawmsg.match(/NTLM (.+)?/);\n\tif(!match || !match[1])\n\t\treturn callback(new Error(\"Couldn't find NTLM in the message type2 comming from the server\"));\n\n\tvar buf = new Buffer(match[1], 'base64');\n\n\tvar msg = {};\n\n\tmsg.signature = buf.slice(0, 8);\n\tmsg.type = buf.readInt16LE(8);\n\n\tif(msg.type != 2)\n\t\treturn callback(new Error(\"Server didn't return a type 2 message\"));\n\n\tmsg.targetNameLen = buf.readInt16LE(12);\n\tmsg.targetNameMaxLen = buf.readInt16LE(14);\n\tmsg.targetNameOffset = buf.readInt32LE(16);\n\tmsg.targetName  = buf.slice(msg.targetNameOffset, msg.targetNameOffset + msg.targetNameMaxLen);\n\n    msg.negotiateFlags = buf.readInt32LE(20);\n    msg.serverChallenge = buf.slice(24, 32);\n    msg.reserved = buf.slice(32, 40);\n\n    if(msg.negotiateFlags & flags.NTLM_NegotiateTargetInfo){\n    \tmsg.targetInfoLen = buf.readInt16LE(40);\n    \tmsg.targetInfoMaxLen = buf.readInt16LE(42);\n    \tmsg.targetInfoOffset = buf.readInt32LE(44);\n    \tmsg.targetInfo = buf.slice(msg.targetInfoOffset, msg.targetInfoOffset + msg.targetInfoLen);\n    }\n\treturn msg;\n}\n\nfunction createType3Message(msg2, options){\n\tvar nonce = msg2.serverChallenge;\n\tvar username = options.username;\n\tvar password = options.password;\n\tvar negotiateFlags = msg2.negotiateFlags;\n\n\tvar isUnicode = negotiateFlags & flags.NTLM_NegotiateUnicode;\n\tvar isNegotiateExtendedSecurity = negotiateFlags & flags.NTLM_NegotiateExtendedSecurity;\n\n\tvar BODY_LENGTH = 72;\n\n\tvar domainName = escape(options.domain.toUpperCase());\n\tvar workstation = escape(options.workstation.toUpperCase());\n\n\tvar workstationBytes, domainNameBytes, usernameBytes, encryptedRandomSessionKeyBytes;\n\n\tvar encryptedRandomSessionKey = \"\";\n\tif(isUnicode){\n\t\tworkstationBytes = new Buffer(workstation, 'utf16le');\n\t\tdomainNameBytes = new Buffer(domainName, 'utf16le');\n\t\tusernameBytes = new Buffer(username, 'utf16le');\n\t\tencryptedRandomSessionKeyBytes = new Buffer(encryptedRandomSessionKey, 'utf16le');\n\t}else{\n\t\tworkstationBytes = new Buffer(workstation, 'ascii');\n\t\tdomainNameBytes = new Buffer(domainName, 'ascii');\n\t\tusernameBytes = new Buffer(username, 'ascii');\n\t\tencryptedRandomSessionKeyBytes = new Buffer(encryptedRandomSessionKey, 'ascii');\n\t}\n\n\tvar lmChallengeResponse = calc_resp(create_LM_hashed_password_v1(password), nonce);\n\tvar ntChallengeResponse = calc_resp(create_NT_hashed_password_v1(password), nonce);\n\n\tif(isNegotiateExtendedSecurity){\n\t\tvar pwhash = create_NT_hashed_password_v1(password);\n\t \tvar clientChallenge = \"\";\n\t \tfor(var i=0; i < 8; i++){\n\t \t\tclientChallenge += String.fromCharCode( Math.floor(Math.random()*256) );\n\t   \t}\n\t   \tvar clientChallengeBytes = new Buffer(clientChallenge, 'ascii');\n\t    var challenges = ntlm2sr_calc_resp(pwhash, nonce, clientChallengeBytes);\n\t    lmChallengeResponse = challenges.lmChallengeResponse;\n\t    ntChallengeResponse = challenges.ntChallengeResponse;\n\t}\n\n\tvar signature = 'NTLMSSP\\0';\n\n\tvar pos = 0;\n\tvar buf = new Buffer(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length + lmChallengeResponse.length + ntChallengeResponse.length + encryptedRandomSessionKeyBytes.length);\n\n\tbuf.write(signature, pos, signature.length); pos += signature.length;\n\tbuf.writeUInt32LE(3, pos); pos += 4;          // type 1\n\n\tbuf.writeUInt16LE(lmChallengeResponse.length, pos); pos += 2; // LmChallengeResponseLen\n\tbuf.writeUInt16LE(lmChallengeResponse.length, pos); pos += 2; // LmChallengeResponseMaxLen\n\tbuf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length, pos); pos += 4; // LmChallengeResponseOffset\n\n\tbuf.writeUInt16LE(ntChallengeResponse.length, pos); pos += 2; // NtChallengeResponseLen\n\tbuf.writeUInt16LE(ntChallengeResponse.length, pos); pos += 2; // NtChallengeResponseMaxLen\n\tbuf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length + lmChallengeResponse.length, pos); pos += 4; // NtChallengeResponseOffset\n\n\tbuf.writeUInt16LE(domainNameBytes.length, pos); pos += 2; // DomainNameLen\n\tbuf.writeUInt16LE(domainNameBytes.length, pos); pos += 2; // DomainNameMaxLen\n\tbuf.writeUInt32LE(BODY_LENGTH, pos); pos += 4; \t\t\t  // DomainNameOffset\n\n\tbuf.writeUInt16LE(usernameBytes.length, pos); pos += 2; // UserNameLen\n\tbuf.writeUInt16LE(usernameBytes.length, pos); pos += 2; // UserNameMaxLen\n\tbuf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length, pos); pos += 4; // UserNameOffset\n\n\tbuf.writeUInt16LE(workstationBytes.length, pos); pos += 2; // WorkstationLen\n\tbuf.writeUInt16LE(workstationBytes.length, pos); pos += 2; // WorkstationMaxLen\n\tbuf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length, pos); pos += 4; // WorkstationOffset\n\n\tbuf.writeUInt16LE(encryptedRandomSessionKeyBytes.length, pos); pos += 2; // EncryptedRandomSessionKeyLen\n\tbuf.writeUInt16LE(encryptedRandomSessionKeyBytes.length, pos); pos += 2; // EncryptedRandomSessionKeyMaxLen\n\tbuf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length + lmChallengeResponse.length + ntChallengeResponse.length, pos); pos += 4; // EncryptedRandomSessionKeyOffset\n\n\tbuf.writeUInt32LE(typeflags.NTLM_TYPE2_FLAGS, pos); pos += 4; // NegotiateFlags\n\n\tbuf.writeUInt8(5, pos); pos++; // ProductMajorVersion\n\tbuf.writeUInt8(1, pos); pos++; // ProductMinorVersion\n\tbuf.writeUInt16LE(2600, pos); pos += 2; // ProductBuild\n\tbuf.writeUInt8(0, pos); pos++; // VersionReserved1\n\tbuf.writeUInt8(0, pos); pos++; // VersionReserved2\n\tbuf.writeUInt8(0, pos); pos++; // VersionReserved3\n\tbuf.writeUInt8(15, pos); pos++; // NTLMRevisionCurrent\n\n\tdomainNameBytes.copy(buf, pos); pos += domainNameBytes.length;\n\tusernameBytes.copy(buf, pos); pos += usernameBytes.length;\n\tworkstationBytes.copy(buf, pos); pos += workstationBytes.length;\n\tlmChallengeResponse.copy(buf, pos); pos += lmChallengeResponse.length;\n\tntChallengeResponse.copy(buf, pos); pos += ntChallengeResponse.length;\n\tencryptedRandomSessionKeyBytes.copy(buf, pos); pos += encryptedRandomSessionKeyBytes.length;\n\n\treturn 'NTLM ' + buf.toString('base64');\n}\n\nfunction create_LM_hashed_password_v1(password){\n\t// fix the password length to 14 bytes\n\tpassword = password.toUpperCase();\n\tvar passwordBytes = new Buffer(password, 'ascii');\n\n\tvar passwordBytesPadded = new Buffer(14);\n\tpasswordBytesPadded.fill(\"\\0\");\n\tvar sourceEnd = 14;\n\tif(passwordBytes.length < 14) sourceEnd = passwordBytes.length;\n\tpasswordBytes.copy(passwordBytesPadded, 0, 0, sourceEnd);\n\n\t// split into 2 parts of 7 bytes:\n\tvar firstPart = passwordBytesPadded.slice(0,7);\n\tvar secondPart = passwordBytesPadded.slice(7);\n\n\tfunction encrypt(buf){\n\t\tvar key = insertZerosEvery7Bits(buf);\n\t\tvar des = crypto.createCipheriv('DES-ECB', key, '');\n\t\treturn des.update(\"KGS!@#$%\"); // page 57 in [MS-NLMP]);\n\t}\n\n\tvar firstPartEncrypted = encrypt(firstPart);\n\tvar secondPartEncrypted = encrypt(secondPart);\n\n\treturn Buffer.concat([firstPartEncrypted, secondPartEncrypted]);\n}\n\nfunction insertZerosEvery7Bits(buf){\n\tvar binaryArray = bytes2binaryArray(buf);\n\tvar newBinaryArray = [];\n\tfor(var i=0; i<binaryArray.length; i++){\n\t\tnewBinaryArray.push(binaryArray[i]);\n\n\t\tif((i+1)%7 === 0){\n\t\t\tnewBinaryArray.push(0);\n\t\t}\n\t}\n\treturn binaryArray2bytes(newBinaryArray);\n}\n\nfunction bytes2binaryArray(buf){\n\tvar hex2binary = {\n\t\t0: [0,0,0,0],\n\t\t1: [0,0,0,1],\n\t\t2: [0,0,1,0],\n\t\t3: [0,0,1,1],\n\t\t4: [0,1,0,0],\n\t\t5: [0,1,0,1],\n\t\t6: [0,1,1,0],\n\t\t7: [0,1,1,1],\n\t\t8: [1,0,0,0],\n\t\t9: [1,0,0,1],\n\t\tA: [1,0,1,0],\n\t\tB: [1,0,1,1],\n\t\tC: [1,1,0,0],\n\t\tD: [1,1,0,1],\n\t\tE: [1,1,1,0],\n\t\tF: [1,1,1,1]\n\t};\n\n\tvar hexString = buf.toString('hex').toUpperCase();\n\tvar array = [];\n\tfor(var i=0; i<hexString.length; i++){\n   \t\tvar hexchar = hexString.charAt(i);\n   \t\tarray = array.concat(hex2binary[hexchar]);\n   \t}\n   \treturn array;\n}\n\nfunction binaryArray2bytes(array){\n\tvar binary2hex = {\n\t\t'0000': 0,\n\t\t'0001': 1,\n\t\t'0010': 2,\n\t\t'0011': 3,\n\t\t'0100': 4,\n\t\t'0101': 5,\n\t\t'0110': 6,\n\t\t'0111': 7,\n\t\t'1000': 8,\n\t\t'1001': 9,\n\t\t'1010': 'A',\n\t\t'1011': 'B',\n\t\t'1100': 'C',\n\t\t'1101': 'D',\n\t\t'1110': 'E',\n\t\t'1111': 'F'\n\t};\n\n \tvar bufArray = [];\n\n\tfor(var i=0; i<array.length; i +=8 ){\n\t\tif((i+7) > array.length)\n\t\t\tbreak;\n\n\t\tvar binString1 = '' + array[i] + '' + array[i+1] + '' + array[i+2] + '' + array[i+3];\n\t\tvar binString2 = '' + array[i+4] + '' + array[i+5] + '' + array[i+6] + '' + array[i+7];\n   \t\tvar hexchar1 = binary2hex[binString1];\n   \t\tvar hexchar2 = binary2hex[binString2];\n\n   \t\tvar buf = new Buffer(hexchar1 + '' + hexchar2, 'hex');\n   \t\tbufArray.push(buf);\n   \t}\n\n   \treturn Buffer.concat(bufArray);\n}\n\nfunction create_NT_hashed_password_v1(password){\n\tvar buf = new Buffer(password, 'utf16le');\n\tvar md4 = crypto.createHash('md4');\n\tmd4.update(buf);\n\treturn new Buffer(md4.digest());\n}\n\nfunction calc_resp(password_hash, server_challenge){\n    // padding with zeros to make the hash 21 bytes long\n    var passHashPadded = new Buffer(21);\n    passHashPadded.fill(\"\\0\");\n    password_hash.copy(passHashPadded, 0, 0, password_hash.length);\n\n    var resArray = [];\n\n    var des = crypto.createCipheriv('DES-ECB', insertZerosEvery7Bits(passHashPadded.slice(0,7)), '');\n    resArray.push( des.update(server_challenge.slice(0,8)) );\n\n    des = crypto.createCipheriv('DES-ECB', insertZerosEvery7Bits(passHashPadded.slice(7,14)), '');\n    resArray.push( des.update(server_challenge.slice(0,8)) );\n\n    des = crypto.createCipheriv('DES-ECB', insertZerosEvery7Bits(passHashPadded.slice(14,21)), '');\n    resArray.push( des.update(server_challenge.slice(0,8)) );\n\n   \treturn Buffer.concat(resArray);\n}\n\nfunction ntlm2sr_calc_resp(responseKeyNT, serverChallenge, clientChallenge){\n\t// padding with zeros to make the hash 16 bytes longer\n    var lmChallengeResponse = new Buffer(clientChallenge.length + 16);\n    lmChallengeResponse.fill(\"\\0\");\n    clientChallenge.copy(lmChallengeResponse, 0, 0, clientChallenge.length);\n\n    var buf = Buffer.concat([serverChallenge, clientChallenge]);\n    var md5 = crypto.createHash('md5');\n    md5.update(buf);\n    var sess = md5.digest();\n    var ntChallengeResponse = calc_resp(responseKeyNT, sess.slice(0,8));\n\n    return {\n    \tlmChallengeResponse: lmChallengeResponse,\n    \tntChallengeResponse: ntChallengeResponse\n    };\n}\n\nexports.createType1Message = createType1Message;\nexports.parseType2Message = parseType2Message;\nexports.createType3Message = createType3Message;\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cG50bG0vbnRsbS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsc0JBQVE7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQSw0Q0FBNEMsd0JBQXdCO0FBQ3BFLDRCQUE0QixtQkFBbUI7QUFDL0MscUNBQXFDLFVBQVU7O0FBRS9DLHdDQUF3QyxVQUFVO0FBQ2xELHdDQUF3QyxVQUFVO0FBQ2xELDJEQUEyRCxVQUFVOztBQUVyRSw2Q0FBNkMsVUFBVTtBQUN2RCw2Q0FBNkMsVUFBVTtBQUN2RCxzQ0FBc0MsVUFBVTs7QUFFaEQseUJBQXlCLGVBQWU7QUFDeEMseUJBQXlCLGVBQWU7QUFDeEMsK0JBQStCLFVBQVU7O0FBRXpDLDBCQUEwQixVQUFVO0FBQ3BDLDBCQUEwQixVQUFVO0FBQ3BDLDBCQUEwQixVQUFVO0FBQ3BDLDBCQUEwQixVQUFVOztBQUVwQywyREFBMkQsMkJBQTJCO0FBQ3RGLDJEQUEyRDs7QUFFM0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLDhDQUE4QztBQUM5Qyw0QkFBNEIsbUJBQW1COztBQUUvQyxxREFBcUQsVUFBVTtBQUMvRCxxREFBcUQsVUFBVTtBQUMvRCxnSEFBZ0gsVUFBVTs7QUFFMUgscURBQXFELFVBQVU7QUFDL0QscURBQXFELFVBQVU7QUFDL0QsNklBQTZJLFVBQVU7O0FBRXZKLGlEQUFpRCxVQUFVO0FBQzNELGlEQUFpRCxVQUFVO0FBQzNELHNDQUFzQyxlQUFlOztBQUVyRCwrQ0FBK0MsVUFBVTtBQUN6RCwrQ0FBK0MsVUFBVTtBQUN6RCwrREFBK0QsVUFBVTs7QUFFekUsa0RBQWtELFVBQVU7QUFDNUQsa0RBQWtELFVBQVU7QUFDNUQsc0ZBQXNGLFVBQVU7O0FBRWhHLGdFQUFnRSxVQUFVO0FBQzFFLGdFQUFnRSxVQUFVO0FBQzFFLDBLQUEwSyxVQUFVOztBQUVwTCxxREFBcUQsVUFBVTs7QUFFL0QseUJBQXlCLE9BQU87QUFDaEMseUJBQXlCLE9BQU87QUFDaEMsK0JBQStCLFVBQVU7QUFDekMseUJBQXlCLE9BQU87QUFDaEMseUJBQXlCLE9BQU87QUFDaEMseUJBQXlCLE9BQU87QUFDaEMsMEJBQTBCLE9BQU87O0FBRWpDLGlDQUFpQztBQUNqQywrQkFBK0I7QUFDL0Isa0NBQWtDO0FBQ2xDLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckMsZ0RBQWdEOztBQUVoRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxzQkFBc0I7QUFDcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjLG9CQUFvQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGNBQWMsZ0JBQWdCO0FBQzlCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLDBCQUEwQiIsInNvdXJjZXMiOlsid2VicGFjazovL21ldGFicnMvLi9ub2RlX21vZHVsZXMvaHR0cG50bG0vbnRsbS5qcz80ZjE4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcblxudmFyIGZsYWdzID0ge1xuXHROVExNX05lZ290aWF0ZVVuaWNvZGUgICAgICAgICAgICAgICAgOiAgMHgwMDAwMDAwMSxcblx0TlRMTV9OZWdvdGlhdGVPRU0gICAgICAgICAgICAgICAgICAgIDogIDB4MDAwMDAwMDIsXG5cdE5UTE1fUmVxdWVzdFRhcmdldCAgICAgICAgICAgICAgICAgICA6ICAweDAwMDAwMDA0LFxuXHROVExNX1Vua25vd245ICAgICAgICAgICAgICAgICAgICAgICAgOiAgMHgwMDAwMDAwOCxcblx0TlRMTV9OZWdvdGlhdGVTaWduICAgICAgICAgICAgICAgICAgIDogIDB4MDAwMDAwMTAsXG5cdE5UTE1fTmVnb3RpYXRlU2VhbCAgICAgICAgICAgICAgICAgICA6ICAweDAwMDAwMDIwLFxuXHROVExNX05lZ290aWF0ZURhdGFncmFtICAgICAgICAgICAgICAgOiAgMHgwMDAwMDA0MCxcblx0TlRMTV9OZWdvdGlhdGVMYW5NYW5hZ2VyS2V5ICAgICAgICAgIDogIDB4MDAwMDAwODAsXG5cdE5UTE1fVW5rbm93bjggICAgICAgICAgICAgICAgICAgICAgICA6ICAweDAwMDAwMTAwLFxuXHROVExNX05lZ290aWF0ZU5UTE0gICAgICAgICAgICAgICAgICAgOiAgMHgwMDAwMDIwMCxcblx0TlRMTV9OZWdvdGlhdGVOVE9ubHkgICAgICAgICAgICAgICAgIDogIDB4MDAwMDA0MDAsXG5cdE5UTE1fQW5vbnltb3VzICAgICAgICAgICAgICAgICAgICAgICA6ICAweDAwMDAwODAwLFxuXHROVExNX05lZ290aWF0ZU9lbURvbWFpblN1cHBsaWVkICAgICAgOiAgMHgwMDAwMTAwMCxcblx0TlRMTV9OZWdvdGlhdGVPZW1Xb3Jrc3RhdGlvblN1cHBsaWVkIDogIDB4MDAwMDIwMDAsXG5cdE5UTE1fVW5rbm93bjYgICAgICAgICAgICAgICAgICAgICAgICA6ICAweDAwMDA0MDAwLFxuXHROVExNX05lZ290aWF0ZUFsd2F5c1NpZ24gICAgICAgICAgICAgOiAgMHgwMDAwODAwMCxcblx0TlRMTV9UYXJnZXRUeXBlRG9tYWluICAgICAgICAgICAgICAgIDogIDB4MDAwMTAwMDAsXG5cdE5UTE1fVGFyZ2V0VHlwZVNlcnZlciAgICAgICAgICAgICAgICA6ICAweDAwMDIwMDAwLFxuXHROVExNX1RhcmdldFR5cGVTaGFyZSAgICAgICAgICAgICAgICAgOiAgMHgwMDA0MDAwMCxcblx0TlRMTV9OZWdvdGlhdGVFeHRlbmRlZFNlY3VyaXR5ICAgICAgIDogIDB4MDAwODAwMDAsXG5cdE5UTE1fTmVnb3RpYXRlSWRlbnRpZnkgICAgICAgICAgICAgICA6ICAweDAwMTAwMDAwLFxuXHROVExNX1Vua25vd241ICAgICAgICAgICAgICAgICAgICAgICAgOiAgMHgwMDIwMDAwMCxcblx0TlRMTV9SZXF1ZXN0Tm9uTlRTZXNzaW9uS2V5ICAgICAgICAgIDogIDB4MDA0MDAwMDAsXG5cdE5UTE1fTmVnb3RpYXRlVGFyZ2V0SW5mbyAgICAgICAgICAgICA6ICAweDAwODAwMDAwLFxuXHROVExNX1Vua25vd240ICAgICAgICAgICAgICAgICAgICAgICAgOiAgMHgwMTAwMDAwMCxcblx0TlRMTV9OZWdvdGlhdGVWZXJzaW9uICAgICAgICAgICAgICAgIDogIDB4MDIwMDAwMDAsXG5cdE5UTE1fVW5rbm93bjMgICAgICAgICAgICAgICAgICAgICAgICA6ICAweDA0MDAwMDAwLFxuXHROVExNX1Vua25vd24yICAgICAgICAgICAgICAgICAgICAgICAgOiAgMHgwODAwMDAwMCxcblx0TlRMTV9Vbmtub3duMSAgICAgICAgICAgICAgICAgICAgICAgIDogIDB4MTAwMDAwMDAsXG5cdE5UTE1fTmVnb3RpYXRlMTI4ICAgICAgICAgICAgICAgICAgICA6ICAweDIwMDAwMDAwLFxuXHROVExNX05lZ290aWF0ZUtleUV4Y2hhbmdlICAgICAgICAgICAgOiAgMHg0MDAwMDAwMCxcblx0TlRMTV9OZWdvdGlhdGU1NiAgICAgICAgICAgICAgICAgICAgIDogIDB4ODAwMDAwMDBcbn07XG52YXIgdHlwZWZsYWdzID0ge1xuXHROVExNX1RZUEUxX0ZMQUdTIDogXHQgIGZsYWdzLk5UTE1fTmVnb3RpYXRlVW5pY29kZVxuXHRcdFx0XHRcdFx0KyBmbGFncy5OVExNX05lZ290aWF0ZU9FTVxuXHRcdFx0XHRcdFx0KyBmbGFncy5OVExNX1JlcXVlc3RUYXJnZXRcblx0XHRcdFx0XHRcdCsgZmxhZ3MuTlRMTV9OZWdvdGlhdGVOVExNXG5cdFx0XHRcdFx0XHQrIGZsYWdzLk5UTE1fTmVnb3RpYXRlT2VtRG9tYWluU3VwcGxpZWRcblx0XHRcdFx0XHRcdCsgZmxhZ3MuTlRMTV9OZWdvdGlhdGVPZW1Xb3Jrc3RhdGlvblN1cHBsaWVkXG5cdFx0XHRcdFx0XHQrIGZsYWdzLk5UTE1fTmVnb3RpYXRlQWx3YXlzU2lnblxuXHRcdFx0XHRcdFx0KyBmbGFncy5OVExNX05lZ290aWF0ZUV4dGVuZGVkU2VjdXJpdHlcblx0XHRcdFx0XHRcdCsgZmxhZ3MuTlRMTV9OZWdvdGlhdGVWZXJzaW9uXG5cdFx0XHRcdFx0XHQrIGZsYWdzLk5UTE1fTmVnb3RpYXRlMTI4XG5cdFx0XHRcdFx0XHQrIGZsYWdzLk5UTE1fTmVnb3RpYXRlNTYsXG5cblx0TlRMTV9UWVBFMl9GTEFHUyA6ICAgIGZsYWdzLk5UTE1fTmVnb3RpYXRlVW5pY29kZVxuXHRcdFx0XHRcdFx0KyBmbGFncy5OVExNX1JlcXVlc3RUYXJnZXRcblx0XHRcdFx0XHRcdCsgZmxhZ3MuTlRMTV9OZWdvdGlhdGVOVExNXG5cdFx0XHRcdFx0XHQrIGZsYWdzLk5UTE1fTmVnb3RpYXRlQWx3YXlzU2lnblxuXHRcdFx0XHRcdFx0KyBmbGFncy5OVExNX05lZ290aWF0ZUV4dGVuZGVkU2VjdXJpdHlcblx0XHRcdFx0XHRcdCsgZmxhZ3MuTlRMTV9OZWdvdGlhdGVUYXJnZXRJbmZvXG5cdFx0XHRcdFx0XHQrIGZsYWdzLk5UTE1fTmVnb3RpYXRlVmVyc2lvblxuXHRcdFx0XHRcdFx0KyBmbGFncy5OVExNX05lZ290aWF0ZTEyOFxuXHRcdFx0XHRcdFx0KyBmbGFncy5OVExNX05lZ290aWF0ZTU2XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVUeXBlMU1lc3NhZ2Uob3B0aW9ucyl7XG5cdHZhciBkb21haW4gPSBlc2NhcGUob3B0aW9ucy5kb21haW4udG9VcHBlckNhc2UoKSk7XG5cdHZhciB3b3Jrc3RhdGlvbiA9IGVzY2FwZShvcHRpb25zLndvcmtzdGF0aW9uLnRvVXBwZXJDYXNlKCkpO1xuXHR2YXIgcHJvdG9jb2wgPSAnTlRMTVNTUFxcMCc7XG5cblx0dmFyIEJPRFlfTEVOR1RIID0gNDA7XG5cblx0dmFyIHR5cGUxZmxhZ3MgPSB0eXBlZmxhZ3MuTlRMTV9UWVBFMV9GTEFHUztcblx0aWYoIWRvbWFpbiB8fCBkb21haW4gPT09ICcnKVxuXHRcdHR5cGUxZmxhZ3MgPSB0eXBlMWZsYWdzIC0gZmxhZ3MuTlRMTV9OZWdvdGlhdGVPZW1Eb21haW5TdXBwbGllZDtcblxuXHR2YXIgcG9zID0gMDtcblx0dmFyIGJ1ZiA9IG5ldyBCdWZmZXIoQk9EWV9MRU5HVEggKyBkb21haW4ubGVuZ3RoICsgd29ya3N0YXRpb24ubGVuZ3RoKTtcblxuXG5cdGJ1Zi53cml0ZShwcm90b2NvbCwgcG9zLCBwcm90b2NvbC5sZW5ndGgpOyBwb3MgKz0gcHJvdG9jb2wubGVuZ3RoOyAvLyBwcm90b2NvbFxuXHRidWYud3JpdGVVSW50MzJMRSgxLCBwb3MpOyBwb3MgKz0gNDsgICAgICAgICAgLy8gdHlwZSAxXG5cdGJ1Zi53cml0ZVVJbnQzMkxFKHR5cGUxZmxhZ3MsIHBvcyk7IHBvcyArPSA0OyAvLyBUWVBFMSBmbGFnXG5cblx0YnVmLndyaXRlVUludDE2TEUoZG9tYWluLmxlbmd0aCwgcG9zKTsgcG9zICs9IDI7IC8vIGRvbWFpbiBsZW5ndGhcblx0YnVmLndyaXRlVUludDE2TEUoZG9tYWluLmxlbmd0aCwgcG9zKTsgcG9zICs9IDI7IC8vIGRvbWFpbiBtYXggbGVuZ3RoXG5cdGJ1Zi53cml0ZVVJbnQzMkxFKEJPRFlfTEVOR1RIICsgd29ya3N0YXRpb24ubGVuZ3RoLCBwb3MpOyBwb3MgKz0gNDsgLy8gZG9tYWluIGJ1ZmZlciBvZmZzZXRcblxuXHRidWYud3JpdGVVSW50MTZMRSh3b3Jrc3RhdGlvbi5sZW5ndGgsIHBvcyk7IHBvcyArPSAyOyAvLyB3b3Jrc3RhdGlvbiBsZW5ndGhcblx0YnVmLndyaXRlVUludDE2TEUod29ya3N0YXRpb24ubGVuZ3RoLCBwb3MpOyBwb3MgKz0gMjsgLy8gd29ya3N0YXRpb24gbWF4IGxlbmd0aFxuXHRidWYud3JpdGVVSW50MzJMRShCT0RZX0xFTkdUSCwgcG9zKTsgcG9zICs9IDQ7IC8vIHdvcmtzdGF0aW9uIGJ1ZmZlciBvZmZzZXRcblxuXHRidWYud3JpdGVVSW50OCg1LCBwb3MpOyBwb3MgKz0gMTsgICAgICAvL1Byb2R1Y3RNYWpvclZlcnNpb25cblx0YnVmLndyaXRlVUludDgoMSwgcG9zKTsgcG9zICs9IDE7ICAgICAgLy9Qcm9kdWN0TWlub3JWZXJzaW9uXG5cdGJ1Zi53cml0ZVVJbnQxNkxFKDI2MDAsIHBvcyk7IHBvcyArPSAyOyAvL1Byb2R1Y3RCdWlsZFxuXG5cdGJ1Zi53cml0ZVVJbnQ4KDAgLCBwb3MpOyBwb3MgKz0gMTsgLy9WZXJzaW9uUmVzZXJ2ZWQxXG5cdGJ1Zi53cml0ZVVJbnQ4KDAgLCBwb3MpOyBwb3MgKz0gMTsgLy9WZXJzaW9uUmVzZXJ2ZWQyXG5cdGJ1Zi53cml0ZVVJbnQ4KDAgLCBwb3MpOyBwb3MgKz0gMTsgLy9WZXJzaW9uUmVzZXJ2ZWQzXG5cdGJ1Zi53cml0ZVVJbnQ4KDE1LCBwb3MpOyBwb3MgKz0gMTsgLy9OVExNUmV2aXNpb25DdXJyZW50XG5cblx0YnVmLndyaXRlKHdvcmtzdGF0aW9uLCBwb3MsIHdvcmtzdGF0aW9uLmxlbmd0aCwgJ2FzY2lpJyk7IHBvcyArPSB3b3Jrc3RhdGlvbi5sZW5ndGg7IC8vIHdvcmtzdGF0aW9uIHN0cmluZ1xuXHRidWYud3JpdGUoZG9tYWluICAgICAsIHBvcywgZG9tYWluLmxlbmd0aCAgICAgLCAnYXNjaWknKTsgcG9zICs9IGRvbWFpbi5sZW5ndGg7XG5cblx0cmV0dXJuICdOVExNICcgKyBidWYudG9TdHJpbmcoJ2Jhc2U2NCcpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGUyTWVzc2FnZShyYXdtc2csIGNhbGxiYWNrKXtcblx0dmFyIG1hdGNoID0gcmF3bXNnLm1hdGNoKC9OVExNICguKyk/Lyk7XG5cdGlmKCFtYXRjaCB8fCAhbWF0Y2hbMV0pXG5cdFx0cmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgTlRMTSBpbiB0aGUgbWVzc2FnZSB0eXBlMiBjb21taW5nIGZyb20gdGhlIHNlcnZlclwiKSk7XG5cblx0dmFyIGJ1ZiA9IG5ldyBCdWZmZXIobWF0Y2hbMV0sICdiYXNlNjQnKTtcblxuXHR2YXIgbXNnID0ge307XG5cblx0bXNnLnNpZ25hdHVyZSA9IGJ1Zi5zbGljZSgwLCA4KTtcblx0bXNnLnR5cGUgPSBidWYucmVhZEludDE2TEUoOCk7XG5cblx0aWYobXNnLnR5cGUgIT0gMilcblx0XHRyZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKFwiU2VydmVyIGRpZG4ndCByZXR1cm4gYSB0eXBlIDIgbWVzc2FnZVwiKSk7XG5cblx0bXNnLnRhcmdldE5hbWVMZW4gPSBidWYucmVhZEludDE2TEUoMTIpO1xuXHRtc2cudGFyZ2V0TmFtZU1heExlbiA9IGJ1Zi5yZWFkSW50MTZMRSgxNCk7XG5cdG1zZy50YXJnZXROYW1lT2Zmc2V0ID0gYnVmLnJlYWRJbnQzMkxFKDE2KTtcblx0bXNnLnRhcmdldE5hbWUgID0gYnVmLnNsaWNlKG1zZy50YXJnZXROYW1lT2Zmc2V0LCBtc2cudGFyZ2V0TmFtZU9mZnNldCArIG1zZy50YXJnZXROYW1lTWF4TGVuKTtcblxuICAgIG1zZy5uZWdvdGlhdGVGbGFncyA9IGJ1Zi5yZWFkSW50MzJMRSgyMCk7XG4gICAgbXNnLnNlcnZlckNoYWxsZW5nZSA9IGJ1Zi5zbGljZSgyNCwgMzIpO1xuICAgIG1zZy5yZXNlcnZlZCA9IGJ1Zi5zbGljZSgzMiwgNDApO1xuXG4gICAgaWYobXNnLm5lZ290aWF0ZUZsYWdzICYgZmxhZ3MuTlRMTV9OZWdvdGlhdGVUYXJnZXRJbmZvKXtcbiAgICBcdG1zZy50YXJnZXRJbmZvTGVuID0gYnVmLnJlYWRJbnQxNkxFKDQwKTtcbiAgICBcdG1zZy50YXJnZXRJbmZvTWF4TGVuID0gYnVmLnJlYWRJbnQxNkxFKDQyKTtcbiAgICBcdG1zZy50YXJnZXRJbmZvT2Zmc2V0ID0gYnVmLnJlYWRJbnQzMkxFKDQ0KTtcbiAgICBcdG1zZy50YXJnZXRJbmZvID0gYnVmLnNsaWNlKG1zZy50YXJnZXRJbmZvT2Zmc2V0LCBtc2cudGFyZ2V0SW5mb09mZnNldCArIG1zZy50YXJnZXRJbmZvTGVuKTtcbiAgICB9XG5cdHJldHVybiBtc2c7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR5cGUzTWVzc2FnZShtc2cyLCBvcHRpb25zKXtcblx0dmFyIG5vbmNlID0gbXNnMi5zZXJ2ZXJDaGFsbGVuZ2U7XG5cdHZhciB1c2VybmFtZSA9IG9wdGlvbnMudXNlcm5hbWU7XG5cdHZhciBwYXNzd29yZCA9IG9wdGlvbnMucGFzc3dvcmQ7XG5cdHZhciBuZWdvdGlhdGVGbGFncyA9IG1zZzIubmVnb3RpYXRlRmxhZ3M7XG5cblx0dmFyIGlzVW5pY29kZSA9IG5lZ290aWF0ZUZsYWdzICYgZmxhZ3MuTlRMTV9OZWdvdGlhdGVVbmljb2RlO1xuXHR2YXIgaXNOZWdvdGlhdGVFeHRlbmRlZFNlY3VyaXR5ID0gbmVnb3RpYXRlRmxhZ3MgJiBmbGFncy5OVExNX05lZ290aWF0ZUV4dGVuZGVkU2VjdXJpdHk7XG5cblx0dmFyIEJPRFlfTEVOR1RIID0gNzI7XG5cblx0dmFyIGRvbWFpbk5hbWUgPSBlc2NhcGUob3B0aW9ucy5kb21haW4udG9VcHBlckNhc2UoKSk7XG5cdHZhciB3b3Jrc3RhdGlvbiA9IGVzY2FwZShvcHRpb25zLndvcmtzdGF0aW9uLnRvVXBwZXJDYXNlKCkpO1xuXG5cdHZhciB3b3Jrc3RhdGlvbkJ5dGVzLCBkb21haW5OYW1lQnl0ZXMsIHVzZXJuYW1lQnl0ZXMsIGVuY3J5cHRlZFJhbmRvbVNlc3Npb25LZXlCeXRlcztcblxuXHR2YXIgZW5jcnlwdGVkUmFuZG9tU2Vzc2lvbktleSA9IFwiXCI7XG5cdGlmKGlzVW5pY29kZSl7XG5cdFx0d29ya3N0YXRpb25CeXRlcyA9IG5ldyBCdWZmZXIod29ya3N0YXRpb24sICd1dGYxNmxlJyk7XG5cdFx0ZG9tYWluTmFtZUJ5dGVzID0gbmV3IEJ1ZmZlcihkb21haW5OYW1lLCAndXRmMTZsZScpO1xuXHRcdHVzZXJuYW1lQnl0ZXMgPSBuZXcgQnVmZmVyKHVzZXJuYW1lLCAndXRmMTZsZScpO1xuXHRcdGVuY3J5cHRlZFJhbmRvbVNlc3Npb25LZXlCeXRlcyA9IG5ldyBCdWZmZXIoZW5jcnlwdGVkUmFuZG9tU2Vzc2lvbktleSwgJ3V0ZjE2bGUnKTtcblx0fWVsc2V7XG5cdFx0d29ya3N0YXRpb25CeXRlcyA9IG5ldyBCdWZmZXIod29ya3N0YXRpb24sICdhc2NpaScpO1xuXHRcdGRvbWFpbk5hbWVCeXRlcyA9IG5ldyBCdWZmZXIoZG9tYWluTmFtZSwgJ2FzY2lpJyk7XG5cdFx0dXNlcm5hbWVCeXRlcyA9IG5ldyBCdWZmZXIodXNlcm5hbWUsICdhc2NpaScpO1xuXHRcdGVuY3J5cHRlZFJhbmRvbVNlc3Npb25LZXlCeXRlcyA9IG5ldyBCdWZmZXIoZW5jcnlwdGVkUmFuZG9tU2Vzc2lvbktleSwgJ2FzY2lpJyk7XG5cdH1cblxuXHR2YXIgbG1DaGFsbGVuZ2VSZXNwb25zZSA9IGNhbGNfcmVzcChjcmVhdGVfTE1faGFzaGVkX3Bhc3N3b3JkX3YxKHBhc3N3b3JkKSwgbm9uY2UpO1xuXHR2YXIgbnRDaGFsbGVuZ2VSZXNwb25zZSA9IGNhbGNfcmVzcChjcmVhdGVfTlRfaGFzaGVkX3Bhc3N3b3JkX3YxKHBhc3N3b3JkKSwgbm9uY2UpO1xuXG5cdGlmKGlzTmVnb3RpYXRlRXh0ZW5kZWRTZWN1cml0eSl7XG5cdFx0dmFyIHB3aGFzaCA9IGNyZWF0ZV9OVF9oYXNoZWRfcGFzc3dvcmRfdjEocGFzc3dvcmQpO1xuXHQgXHR2YXIgY2xpZW50Q2hhbGxlbmdlID0gXCJcIjtcblx0IFx0Zm9yKHZhciBpPTA7IGkgPCA4OyBpKyspe1xuXHQgXHRcdGNsaWVudENoYWxsZW5nZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMjU2KSApO1xuXHQgICBcdH1cblx0ICAgXHR2YXIgY2xpZW50Q2hhbGxlbmdlQnl0ZXMgPSBuZXcgQnVmZmVyKGNsaWVudENoYWxsZW5nZSwgJ2FzY2lpJyk7XG5cdCAgICB2YXIgY2hhbGxlbmdlcyA9IG50bG0yc3JfY2FsY19yZXNwKHB3aGFzaCwgbm9uY2UsIGNsaWVudENoYWxsZW5nZUJ5dGVzKTtcblx0ICAgIGxtQ2hhbGxlbmdlUmVzcG9uc2UgPSBjaGFsbGVuZ2VzLmxtQ2hhbGxlbmdlUmVzcG9uc2U7XG5cdCAgICBudENoYWxsZW5nZVJlc3BvbnNlID0gY2hhbGxlbmdlcy5udENoYWxsZW5nZVJlc3BvbnNlO1xuXHR9XG5cblx0dmFyIHNpZ25hdHVyZSA9ICdOVExNU1NQXFwwJztcblxuXHR2YXIgcG9zID0gMDtcblx0dmFyIGJ1ZiA9IG5ldyBCdWZmZXIoQk9EWV9MRU5HVEggKyBkb21haW5OYW1lQnl0ZXMubGVuZ3RoICsgdXNlcm5hbWVCeXRlcy5sZW5ndGggKyB3b3Jrc3RhdGlvbkJ5dGVzLmxlbmd0aCArIGxtQ2hhbGxlbmdlUmVzcG9uc2UubGVuZ3RoICsgbnRDaGFsbGVuZ2VSZXNwb25zZS5sZW5ndGggKyBlbmNyeXB0ZWRSYW5kb21TZXNzaW9uS2V5Qnl0ZXMubGVuZ3RoKTtcblxuXHRidWYud3JpdGUoc2lnbmF0dXJlLCBwb3MsIHNpZ25hdHVyZS5sZW5ndGgpOyBwb3MgKz0gc2lnbmF0dXJlLmxlbmd0aDtcblx0YnVmLndyaXRlVUludDMyTEUoMywgcG9zKTsgcG9zICs9IDQ7ICAgICAgICAgIC8vIHR5cGUgMVxuXG5cdGJ1Zi53cml0ZVVJbnQxNkxFKGxtQ2hhbGxlbmdlUmVzcG9uc2UubGVuZ3RoLCBwb3MpOyBwb3MgKz0gMjsgLy8gTG1DaGFsbGVuZ2VSZXNwb25zZUxlblxuXHRidWYud3JpdGVVSW50MTZMRShsbUNoYWxsZW5nZVJlc3BvbnNlLmxlbmd0aCwgcG9zKTsgcG9zICs9IDI7IC8vIExtQ2hhbGxlbmdlUmVzcG9uc2VNYXhMZW5cblx0YnVmLndyaXRlVUludDMyTEUoQk9EWV9MRU5HVEggKyBkb21haW5OYW1lQnl0ZXMubGVuZ3RoICsgdXNlcm5hbWVCeXRlcy5sZW5ndGggKyB3b3Jrc3RhdGlvbkJ5dGVzLmxlbmd0aCwgcG9zKTsgcG9zICs9IDQ7IC8vIExtQ2hhbGxlbmdlUmVzcG9uc2VPZmZzZXRcblxuXHRidWYud3JpdGVVSW50MTZMRShudENoYWxsZW5nZVJlc3BvbnNlLmxlbmd0aCwgcG9zKTsgcG9zICs9IDI7IC8vIE50Q2hhbGxlbmdlUmVzcG9uc2VMZW5cblx0YnVmLndyaXRlVUludDE2TEUobnRDaGFsbGVuZ2VSZXNwb25zZS5sZW5ndGgsIHBvcyk7IHBvcyArPSAyOyAvLyBOdENoYWxsZW5nZVJlc3BvbnNlTWF4TGVuXG5cdGJ1Zi53cml0ZVVJbnQzMkxFKEJPRFlfTEVOR1RIICsgZG9tYWluTmFtZUJ5dGVzLmxlbmd0aCArIHVzZXJuYW1lQnl0ZXMubGVuZ3RoICsgd29ya3N0YXRpb25CeXRlcy5sZW5ndGggKyBsbUNoYWxsZW5nZVJlc3BvbnNlLmxlbmd0aCwgcG9zKTsgcG9zICs9IDQ7IC8vIE50Q2hhbGxlbmdlUmVzcG9uc2VPZmZzZXRcblxuXHRidWYud3JpdGVVSW50MTZMRShkb21haW5OYW1lQnl0ZXMubGVuZ3RoLCBwb3MpOyBwb3MgKz0gMjsgLy8gRG9tYWluTmFtZUxlblxuXHRidWYud3JpdGVVSW50MTZMRShkb21haW5OYW1lQnl0ZXMubGVuZ3RoLCBwb3MpOyBwb3MgKz0gMjsgLy8gRG9tYWluTmFtZU1heExlblxuXHRidWYud3JpdGVVSW50MzJMRShCT0RZX0xFTkdUSCwgcG9zKTsgcG9zICs9IDQ7IFx0XHRcdCAgLy8gRG9tYWluTmFtZU9mZnNldFxuXG5cdGJ1Zi53cml0ZVVJbnQxNkxFKHVzZXJuYW1lQnl0ZXMubGVuZ3RoLCBwb3MpOyBwb3MgKz0gMjsgLy8gVXNlck5hbWVMZW5cblx0YnVmLndyaXRlVUludDE2TEUodXNlcm5hbWVCeXRlcy5sZW5ndGgsIHBvcyk7IHBvcyArPSAyOyAvLyBVc2VyTmFtZU1heExlblxuXHRidWYud3JpdGVVSW50MzJMRShCT0RZX0xFTkdUSCArIGRvbWFpbk5hbWVCeXRlcy5sZW5ndGgsIHBvcyk7IHBvcyArPSA0OyAvLyBVc2VyTmFtZU9mZnNldFxuXG5cdGJ1Zi53cml0ZVVJbnQxNkxFKHdvcmtzdGF0aW9uQnl0ZXMubGVuZ3RoLCBwb3MpOyBwb3MgKz0gMjsgLy8gV29ya3N0YXRpb25MZW5cblx0YnVmLndyaXRlVUludDE2TEUod29ya3N0YXRpb25CeXRlcy5sZW5ndGgsIHBvcyk7IHBvcyArPSAyOyAvLyBXb3Jrc3RhdGlvbk1heExlblxuXHRidWYud3JpdGVVSW50MzJMRShCT0RZX0xFTkdUSCArIGRvbWFpbk5hbWVCeXRlcy5sZW5ndGggKyB1c2VybmFtZUJ5dGVzLmxlbmd0aCwgcG9zKTsgcG9zICs9IDQ7IC8vIFdvcmtzdGF0aW9uT2Zmc2V0XG5cblx0YnVmLndyaXRlVUludDE2TEUoZW5jcnlwdGVkUmFuZG9tU2Vzc2lvbktleUJ5dGVzLmxlbmd0aCwgcG9zKTsgcG9zICs9IDI7IC8vIEVuY3J5cHRlZFJhbmRvbVNlc3Npb25LZXlMZW5cblx0YnVmLndyaXRlVUludDE2TEUoZW5jcnlwdGVkUmFuZG9tU2Vzc2lvbktleUJ5dGVzLmxlbmd0aCwgcG9zKTsgcG9zICs9IDI7IC8vIEVuY3J5cHRlZFJhbmRvbVNlc3Npb25LZXlNYXhMZW5cblx0YnVmLndyaXRlVUludDMyTEUoQk9EWV9MRU5HVEggKyBkb21haW5OYW1lQnl0ZXMubGVuZ3RoICsgdXNlcm5hbWVCeXRlcy5sZW5ndGggKyB3b3Jrc3RhdGlvbkJ5dGVzLmxlbmd0aCArIGxtQ2hhbGxlbmdlUmVzcG9uc2UubGVuZ3RoICsgbnRDaGFsbGVuZ2VSZXNwb25zZS5sZW5ndGgsIHBvcyk7IHBvcyArPSA0OyAvLyBFbmNyeXB0ZWRSYW5kb21TZXNzaW9uS2V5T2Zmc2V0XG5cblx0YnVmLndyaXRlVUludDMyTEUodHlwZWZsYWdzLk5UTE1fVFlQRTJfRkxBR1MsIHBvcyk7IHBvcyArPSA0OyAvLyBOZWdvdGlhdGVGbGFnc1xuXG5cdGJ1Zi53cml0ZVVJbnQ4KDUsIHBvcyk7IHBvcysrOyAvLyBQcm9kdWN0TWFqb3JWZXJzaW9uXG5cdGJ1Zi53cml0ZVVJbnQ4KDEsIHBvcyk7IHBvcysrOyAvLyBQcm9kdWN0TWlub3JWZXJzaW9uXG5cdGJ1Zi53cml0ZVVJbnQxNkxFKDI2MDAsIHBvcyk7IHBvcyArPSAyOyAvLyBQcm9kdWN0QnVpbGRcblx0YnVmLndyaXRlVUludDgoMCwgcG9zKTsgcG9zKys7IC8vIFZlcnNpb25SZXNlcnZlZDFcblx0YnVmLndyaXRlVUludDgoMCwgcG9zKTsgcG9zKys7IC8vIFZlcnNpb25SZXNlcnZlZDJcblx0YnVmLndyaXRlVUludDgoMCwgcG9zKTsgcG9zKys7IC8vIFZlcnNpb25SZXNlcnZlZDNcblx0YnVmLndyaXRlVUludDgoMTUsIHBvcyk7IHBvcysrOyAvLyBOVExNUmV2aXNpb25DdXJyZW50XG5cblx0ZG9tYWluTmFtZUJ5dGVzLmNvcHkoYnVmLCBwb3MpOyBwb3MgKz0gZG9tYWluTmFtZUJ5dGVzLmxlbmd0aDtcblx0dXNlcm5hbWVCeXRlcy5jb3B5KGJ1ZiwgcG9zKTsgcG9zICs9IHVzZXJuYW1lQnl0ZXMubGVuZ3RoO1xuXHR3b3Jrc3RhdGlvbkJ5dGVzLmNvcHkoYnVmLCBwb3MpOyBwb3MgKz0gd29ya3N0YXRpb25CeXRlcy5sZW5ndGg7XG5cdGxtQ2hhbGxlbmdlUmVzcG9uc2UuY29weShidWYsIHBvcyk7IHBvcyArPSBsbUNoYWxsZW5nZVJlc3BvbnNlLmxlbmd0aDtcblx0bnRDaGFsbGVuZ2VSZXNwb25zZS5jb3B5KGJ1ZiwgcG9zKTsgcG9zICs9IG50Q2hhbGxlbmdlUmVzcG9uc2UubGVuZ3RoO1xuXHRlbmNyeXB0ZWRSYW5kb21TZXNzaW9uS2V5Qnl0ZXMuY29weShidWYsIHBvcyk7IHBvcyArPSBlbmNyeXB0ZWRSYW5kb21TZXNzaW9uS2V5Qnl0ZXMubGVuZ3RoO1xuXG5cdHJldHVybiAnTlRMTSAnICsgYnVmLnRvU3RyaW5nKCdiYXNlNjQnKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlX0xNX2hhc2hlZF9wYXNzd29yZF92MShwYXNzd29yZCl7XG5cdC8vIGZpeCB0aGUgcGFzc3dvcmQgbGVuZ3RoIHRvIDE0IGJ5dGVzXG5cdHBhc3N3b3JkID0gcGFzc3dvcmQudG9VcHBlckNhc2UoKTtcblx0dmFyIHBhc3N3b3JkQnl0ZXMgPSBuZXcgQnVmZmVyKHBhc3N3b3JkLCAnYXNjaWknKTtcblxuXHR2YXIgcGFzc3dvcmRCeXRlc1BhZGRlZCA9IG5ldyBCdWZmZXIoMTQpO1xuXHRwYXNzd29yZEJ5dGVzUGFkZGVkLmZpbGwoXCJcXDBcIik7XG5cdHZhciBzb3VyY2VFbmQgPSAxNDtcblx0aWYocGFzc3dvcmRCeXRlcy5sZW5ndGggPCAxNCkgc291cmNlRW5kID0gcGFzc3dvcmRCeXRlcy5sZW5ndGg7XG5cdHBhc3N3b3JkQnl0ZXMuY29weShwYXNzd29yZEJ5dGVzUGFkZGVkLCAwLCAwLCBzb3VyY2VFbmQpO1xuXG5cdC8vIHNwbGl0IGludG8gMiBwYXJ0cyBvZiA3IGJ5dGVzOlxuXHR2YXIgZmlyc3RQYXJ0ID0gcGFzc3dvcmRCeXRlc1BhZGRlZC5zbGljZSgwLDcpO1xuXHR2YXIgc2Vjb25kUGFydCA9IHBhc3N3b3JkQnl0ZXNQYWRkZWQuc2xpY2UoNyk7XG5cblx0ZnVuY3Rpb24gZW5jcnlwdChidWYpe1xuXHRcdHZhciBrZXkgPSBpbnNlcnRaZXJvc0V2ZXJ5N0JpdHMoYnVmKTtcblx0XHR2YXIgZGVzID0gY3J5cHRvLmNyZWF0ZUNpcGhlcml2KCdERVMtRUNCJywga2V5LCAnJyk7XG5cdFx0cmV0dXJuIGRlcy51cGRhdGUoXCJLR1MhQCMkJVwiKTsgLy8gcGFnZSA1NyBpbiBbTVMtTkxNUF0pO1xuXHR9XG5cblx0dmFyIGZpcnN0UGFydEVuY3J5cHRlZCA9IGVuY3J5cHQoZmlyc3RQYXJ0KTtcblx0dmFyIHNlY29uZFBhcnRFbmNyeXB0ZWQgPSBlbmNyeXB0KHNlY29uZFBhcnQpO1xuXG5cdHJldHVybiBCdWZmZXIuY29uY2F0KFtmaXJzdFBhcnRFbmNyeXB0ZWQsIHNlY29uZFBhcnRFbmNyeXB0ZWRdKTtcbn1cblxuZnVuY3Rpb24gaW5zZXJ0WmVyb3NFdmVyeTdCaXRzKGJ1Zil7XG5cdHZhciBiaW5hcnlBcnJheSA9IGJ5dGVzMmJpbmFyeUFycmF5KGJ1Zik7XG5cdHZhciBuZXdCaW5hcnlBcnJheSA9IFtdO1xuXHRmb3IodmFyIGk9MDsgaTxiaW5hcnlBcnJheS5sZW5ndGg7IGkrKyl7XG5cdFx0bmV3QmluYXJ5QXJyYXkucHVzaChiaW5hcnlBcnJheVtpXSk7XG5cblx0XHRpZigoaSsxKSU3ID09PSAwKXtcblx0XHRcdG5ld0JpbmFyeUFycmF5LnB1c2goMCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBiaW5hcnlBcnJheTJieXRlcyhuZXdCaW5hcnlBcnJheSk7XG59XG5cbmZ1bmN0aW9uIGJ5dGVzMmJpbmFyeUFycmF5KGJ1Zil7XG5cdHZhciBoZXgyYmluYXJ5ID0ge1xuXHRcdDA6IFswLDAsMCwwXSxcblx0XHQxOiBbMCwwLDAsMV0sXG5cdFx0MjogWzAsMCwxLDBdLFxuXHRcdDM6IFswLDAsMSwxXSxcblx0XHQ0OiBbMCwxLDAsMF0sXG5cdFx0NTogWzAsMSwwLDFdLFxuXHRcdDY6IFswLDEsMSwwXSxcblx0XHQ3OiBbMCwxLDEsMV0sXG5cdFx0ODogWzEsMCwwLDBdLFxuXHRcdDk6IFsxLDAsMCwxXSxcblx0XHRBOiBbMSwwLDEsMF0sXG5cdFx0QjogWzEsMCwxLDFdLFxuXHRcdEM6IFsxLDEsMCwwXSxcblx0XHREOiBbMSwxLDAsMV0sXG5cdFx0RTogWzEsMSwxLDBdLFxuXHRcdEY6IFsxLDEsMSwxXVxuXHR9O1xuXG5cdHZhciBoZXhTdHJpbmcgPSBidWYudG9TdHJpbmcoJ2hleCcpLnRvVXBwZXJDYXNlKCk7XG5cdHZhciBhcnJheSA9IFtdO1xuXHRmb3IodmFyIGk9MDsgaTxoZXhTdHJpbmcubGVuZ3RoOyBpKyspe1xuICAgXHRcdHZhciBoZXhjaGFyID0gaGV4U3RyaW5nLmNoYXJBdChpKTtcbiAgIFx0XHRhcnJheSA9IGFycmF5LmNvbmNhdChoZXgyYmluYXJ5W2hleGNoYXJdKTtcbiAgIFx0fVxuICAgXHRyZXR1cm4gYXJyYXk7XG59XG5cbmZ1bmN0aW9uIGJpbmFyeUFycmF5MmJ5dGVzKGFycmF5KXtcblx0dmFyIGJpbmFyeTJoZXggPSB7XG5cdFx0JzAwMDAnOiAwLFxuXHRcdCcwMDAxJzogMSxcblx0XHQnMDAxMCc6IDIsXG5cdFx0JzAwMTEnOiAzLFxuXHRcdCcwMTAwJzogNCxcblx0XHQnMDEwMSc6IDUsXG5cdFx0JzAxMTAnOiA2LFxuXHRcdCcwMTExJzogNyxcblx0XHQnMTAwMCc6IDgsXG5cdFx0JzEwMDEnOiA5LFxuXHRcdCcxMDEwJzogJ0EnLFxuXHRcdCcxMDExJzogJ0InLFxuXHRcdCcxMTAwJzogJ0MnLFxuXHRcdCcxMTAxJzogJ0QnLFxuXHRcdCcxMTEwJzogJ0UnLFxuXHRcdCcxMTExJzogJ0YnXG5cdH07XG5cbiBcdHZhciBidWZBcnJheSA9IFtdO1xuXG5cdGZvcih2YXIgaT0wOyBpPGFycmF5Lmxlbmd0aDsgaSArPTggKXtcblx0XHRpZigoaSs3KSA+IGFycmF5Lmxlbmd0aClcblx0XHRcdGJyZWFrO1xuXG5cdFx0dmFyIGJpblN0cmluZzEgPSAnJyArIGFycmF5W2ldICsgJycgKyBhcnJheVtpKzFdICsgJycgKyBhcnJheVtpKzJdICsgJycgKyBhcnJheVtpKzNdO1xuXHRcdHZhciBiaW5TdHJpbmcyID0gJycgKyBhcnJheVtpKzRdICsgJycgKyBhcnJheVtpKzVdICsgJycgKyBhcnJheVtpKzZdICsgJycgKyBhcnJheVtpKzddO1xuICAgXHRcdHZhciBoZXhjaGFyMSA9IGJpbmFyeTJoZXhbYmluU3RyaW5nMV07XG4gICBcdFx0dmFyIGhleGNoYXIyID0gYmluYXJ5MmhleFtiaW5TdHJpbmcyXTtcblxuICAgXHRcdHZhciBidWYgPSBuZXcgQnVmZmVyKGhleGNoYXIxICsgJycgKyBoZXhjaGFyMiwgJ2hleCcpO1xuICAgXHRcdGJ1ZkFycmF5LnB1c2goYnVmKTtcbiAgIFx0fVxuXG4gICBcdHJldHVybiBCdWZmZXIuY29uY2F0KGJ1ZkFycmF5KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlX05UX2hhc2hlZF9wYXNzd29yZF92MShwYXNzd29yZCl7XG5cdHZhciBidWYgPSBuZXcgQnVmZmVyKHBhc3N3b3JkLCAndXRmMTZsZScpO1xuXHR2YXIgbWQ0ID0gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNCcpO1xuXHRtZDQudXBkYXRlKGJ1Zik7XG5cdHJldHVybiBuZXcgQnVmZmVyKG1kNC5kaWdlc3QoKSk7XG59XG5cbmZ1bmN0aW9uIGNhbGNfcmVzcChwYXNzd29yZF9oYXNoLCBzZXJ2ZXJfY2hhbGxlbmdlKXtcbiAgICAvLyBwYWRkaW5nIHdpdGggemVyb3MgdG8gbWFrZSB0aGUgaGFzaCAyMSBieXRlcyBsb25nXG4gICAgdmFyIHBhc3NIYXNoUGFkZGVkID0gbmV3IEJ1ZmZlcigyMSk7XG4gICAgcGFzc0hhc2hQYWRkZWQuZmlsbChcIlxcMFwiKTtcbiAgICBwYXNzd29yZF9oYXNoLmNvcHkocGFzc0hhc2hQYWRkZWQsIDAsIDAsIHBhc3N3b3JkX2hhc2gubGVuZ3RoKTtcblxuICAgIHZhciByZXNBcnJheSA9IFtdO1xuXG4gICAgdmFyIGRlcyA9IGNyeXB0by5jcmVhdGVDaXBoZXJpdignREVTLUVDQicsIGluc2VydFplcm9zRXZlcnk3Qml0cyhwYXNzSGFzaFBhZGRlZC5zbGljZSgwLDcpKSwgJycpO1xuICAgIHJlc0FycmF5LnB1c2goIGRlcy51cGRhdGUoc2VydmVyX2NoYWxsZW5nZS5zbGljZSgwLDgpKSApO1xuXG4gICAgZGVzID0gY3J5cHRvLmNyZWF0ZUNpcGhlcml2KCdERVMtRUNCJywgaW5zZXJ0WmVyb3NFdmVyeTdCaXRzKHBhc3NIYXNoUGFkZGVkLnNsaWNlKDcsMTQpKSwgJycpO1xuICAgIHJlc0FycmF5LnB1c2goIGRlcy51cGRhdGUoc2VydmVyX2NoYWxsZW5nZS5zbGljZSgwLDgpKSApO1xuXG4gICAgZGVzID0gY3J5cHRvLmNyZWF0ZUNpcGhlcml2KCdERVMtRUNCJywgaW5zZXJ0WmVyb3NFdmVyeTdCaXRzKHBhc3NIYXNoUGFkZGVkLnNsaWNlKDE0LDIxKSksICcnKTtcbiAgICByZXNBcnJheS5wdXNoKCBkZXMudXBkYXRlKHNlcnZlcl9jaGFsbGVuZ2Uuc2xpY2UoMCw4KSkgKTtcblxuICAgXHRyZXR1cm4gQnVmZmVyLmNvbmNhdChyZXNBcnJheSk7XG59XG5cbmZ1bmN0aW9uIG50bG0yc3JfY2FsY19yZXNwKHJlc3BvbnNlS2V5TlQsIHNlcnZlckNoYWxsZW5nZSwgY2xpZW50Q2hhbGxlbmdlKXtcblx0Ly8gcGFkZGluZyB3aXRoIHplcm9zIHRvIG1ha2UgdGhlIGhhc2ggMTYgYnl0ZXMgbG9uZ2VyXG4gICAgdmFyIGxtQ2hhbGxlbmdlUmVzcG9uc2UgPSBuZXcgQnVmZmVyKGNsaWVudENoYWxsZW5nZS5sZW5ndGggKyAxNik7XG4gICAgbG1DaGFsbGVuZ2VSZXNwb25zZS5maWxsKFwiXFwwXCIpO1xuICAgIGNsaWVudENoYWxsZW5nZS5jb3B5KGxtQ2hhbGxlbmdlUmVzcG9uc2UsIDAsIDAsIGNsaWVudENoYWxsZW5nZS5sZW5ndGgpO1xuXG4gICAgdmFyIGJ1ZiA9IEJ1ZmZlci5jb25jYXQoW3NlcnZlckNoYWxsZW5nZSwgY2xpZW50Q2hhbGxlbmdlXSk7XG4gICAgdmFyIG1kNSA9IGNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKTtcbiAgICBtZDUudXBkYXRlKGJ1Zik7XG4gICAgdmFyIHNlc3MgPSBtZDUuZGlnZXN0KCk7XG4gICAgdmFyIG50Q2hhbGxlbmdlUmVzcG9uc2UgPSBjYWxjX3Jlc3AocmVzcG9uc2VLZXlOVCwgc2Vzcy5zbGljZSgwLDgpKTtcblxuICAgIHJldHVybiB7XG4gICAgXHRsbUNoYWxsZW5nZVJlc3BvbnNlOiBsbUNoYWxsZW5nZVJlc3BvbnNlLFxuICAgIFx0bnRDaGFsbGVuZ2VSZXNwb25zZTogbnRDaGFsbGVuZ2VSZXNwb25zZVxuICAgIH07XG59XG5cbmV4cG9ydHMuY3JlYXRlVHlwZTFNZXNzYWdlID0gY3JlYXRlVHlwZTFNZXNzYWdlO1xuZXhwb3J0cy5wYXJzZVR5cGUyTWVzc2FnZSA9IHBhcnNlVHlwZTJNZXNzYWdlO1xuZXhwb3J0cy5jcmVhdGVUeXBlM01lc3NhZ2UgPSBjcmVhdGVUeXBlM01lc3NhZ2U7XG5cblxuXG5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/httpntlm/ntlm.js\n");

/***/ })

};
;