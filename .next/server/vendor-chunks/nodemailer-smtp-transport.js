"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nodemailer-smtp-transport";
exports.ids = ["vendor-chunks/nodemailer-smtp-transport"];
exports.modules = {

/***/ "(rsc)/./node_modules/nodemailer-smtp-transport/lib/smtp-transport.js":
/*!**********************************************************************!*\
  !*** ./node_modules/nodemailer-smtp-transport/lib/smtp-transport.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar SMTPConnection = __webpack_require__(/*! smtp-connection */ \"(rsc)/./node_modules/smtp-connection/lib/smtp-connection.js\");\nvar packageData = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/nodemailer-smtp-transport/package.json\");\nvar wellknown = __webpack_require__(/*! nodemailer-wellknown */ \"(rsc)/./node_modules/nodemailer-wellknown/index.js\");\nvar shared = __webpack_require__(/*! nodemailer-shared */ \"(rsc)/./node_modules/nodemailer-shared/lib/shared.js\");\n\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar util = __webpack_require__(/*! util */ \"util\");\n\n// expose to the world\nmodule.exports = function (options) {\n    return new SMTPTransport(options);\n};\n\n/**\n * Creates a SMTP transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options Connection options\n */\nfunction SMTPTransport(options) {\n    EventEmitter.call(this);\n\n    options = options || {};\n    if (typeof options === 'string') {\n        options = {\n            url: options\n        };\n    }\n\n    var urlData;\n    var service = options.service;\n\n    if (typeof options.getSocket === 'function') {\n        this.getSocket = options.getSocket;\n    }\n\n    if (options.url) {\n        urlData = shared.parseConnectionUrl(options.url);\n        service = service || urlData.service;\n    }\n\n    this.options = assign(\n        false, // create new object\n        options, // regular options\n        urlData, // url options\n        service && wellknown(service) // wellknown options\n    );\n\n    this.logger = shared.getLogger(this.options);\n\n    // temporary object\n    var connection = new SMTPConnection(this.options);\n\n    this.name = 'SMTP';\n    this.version = packageData.version + '[client:' + connection.version + ']';\n}\nutil.inherits(SMTPTransport, EventEmitter);\n\n/**\n * Placeholder function for creating proxy sockets. This method immediatelly returns\n * without a socket\n *\n * @param {Object} options Connection options\n * @param {Function} callback Callback function to run with the socket keys\n */\nSMTPTransport.prototype.getSocket = function (options, callback) {\n    // return immediatelly\n    return callback(null, false);\n};\n\n/**\n * Sends an e-mail using the selected settings\n *\n * @param {Object} mail Mail object\n * @param {Function} callback Callback function\n */\nSMTPTransport.prototype.send = function (mail, callback) {\n\n    this.getSocket(this.options, function (err, socketOptions) {\n        if (err) {\n            return callback(err);\n        }\n\n        var options = this.options;\n        if (socketOptions && socketOptions.connection) {\n            this.logger.info('Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n            // only copy options if we need to modify it\n            options = assign(false, options);\n            Object.keys(socketOptions).forEach(function (key) {\n                options[key] = socketOptions[key];\n            });\n        }\n\n        var connection = new SMTPConnection(options);\n        var returned = false;\n\n        connection.once('error', function (err) {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            connection.close();\n            return callback(err);\n        });\n\n        connection.once('end', function () {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(new Error('Connection closed'));\n        });\n\n        var sendMessage = function () {\n            var envelope = mail.message.getEnvelope();\n            var messageId = (mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n            var recipients = [].concat(envelope.to || []);\n            if (recipients.length > 3) {\n                recipients.push('...and ' + recipients.splice(2).length + ' more');\n            }\n\n            this.logger.info('Sending message <%s> to <%s>', messageId, recipients.join(', '));\n\n            connection.send(envelope, mail.message.createReadStream(), function (err, info) {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n\n                connection.close();\n                if (err) {\n                    return callback(err);\n                }\n                info.envelope = {\n                    from: envelope.from,\n                    to: envelope.to\n                };\n                info.messageId = messageId;\n                return callback(null, info);\n            });\n        }.bind(this);\n\n        connection.connect(function () {\n            if (returned) {\n                return;\n            }\n\n            if (this.options.auth) {\n                connection.login(this.options.auth, function (err) {\n                    if (returned) {\n                        return;\n                    }\n\n                    if (err) {\n                        returned = true;\n                        connection.close();\n                        return callback(err);\n                    }\n\n                    sendMessage();\n                });\n            } else {\n                sendMessage();\n            }\n        }.bind(this));\n    }.bind(this));\n};\n\n/**\n * Verifies SMTP configuration\n *\n * @param {Function} callback Callback function\n */\nSMTPTransport.prototype.verify = function (callback) {\n    var promise;\n\n    if (!callback && typeof Promise === 'function') {\n        promise = new Promise(function (resolve, reject) {\n            callback = shared.callbackPromise(resolve, reject);\n        });\n    }\n\n    this.getSocket(this.options, function (err, socketOptions) {\n        if (err) {\n            return callback(err);\n        }\n\n        var options = this.options;\n        if (socketOptions && socketOptions.connection) {\n            this.logger.info('Using proxied socket from %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort);\n            options = assign(false, options);\n            Object.keys(socketOptions).forEach(function (key) {\n                options[key] = socketOptions[key];\n            });\n        }\n\n        var connection = new SMTPConnection(options);\n        var returned = false;\n\n        connection.once('error', function (err) {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            connection.close();\n            return callback(err);\n        });\n\n        connection.once('end', function () {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(new Error('Connection closed'));\n        });\n\n        var finalize = function () {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            connection.quit();\n            return callback(null, true);\n        };\n\n        connection.connect(function () {\n            if (returned) {\n                return;\n            }\n\n            if (this.options.auth) {\n                connection.login(this.options.auth, function (err) {\n                    if (returned) {\n                        return;\n                    }\n\n                    if (err) {\n                        returned = true;\n                        connection.close();\n                        return callback(err);\n                    }\n\n                    finalize();\n                });\n            } else {\n                finalize();\n            }\n        }.bind(this));\n    }.bind(this));\n\n    return promise;\n};\n\n/**\n * Copies properties from source objects to target objects\n */\nfunction assign( /* target, ... sources */ ) {\n    var args = Array.prototype.slice.call(arguments);\n    var target = args.shift() || {};\n\n    args.forEach(function (source) {\n        Object.keys(source || {}).forEach(function (key) {\n            if (['tls', 'auth'].indexOf(key) >= 0 && source[key] && typeof source[key] === 'object') {\n                // tls and auth are special keys that need to be enumerated separately\n                // other objects are passed as is\n                if (!target[key]) {\n                    // esnure that target has this key\n                    target[key] = {};\n                }\n                Object.keys(source[key]).forEach(function (subKey) {\n                    target[key][subKey] = source[key][subKey];\n                });\n            } else {\n                target[key] = source[key];\n            }\n        });\n    });\n    return target;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer-smtp-transport/lib/smtp-transport.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer-smtp-transport/package.json":
/*!*************************************************************!*\
  !*** ./node_modules/nodemailer-smtp-transport/package.json ***!
  \*************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"nodemailer-smtp-transport","version":"2.7.4","description":"SMTP transport for Nodemailer","main":"lib/smtp-transport.js","scripts":{"test":"grunt mochaTest"},"repository":{"type":"git","url":"git://github.com/andris9/nodemailer-smtp-transport.git"},"keywords":["SMTP","Nodemailer"],"author":"Andris Reinman","license":"MIT","bugs":{"url":"https://github.com/andris9/nodemailer-smtp-transport/issues"},"homepage":"http://github.com/andris9/nodemailer-smtp-transport","dependencies":{"nodemailer-shared":"1.1.0","nodemailer-wellknown":"0.1.10","smtp-connection":"2.12.0"},"devDependencies":{"chai":"^3.5.0","grunt":"^1.0.1","grunt-cli":"^1.2.0","grunt-eslint":"^19.0.0","grunt-mocha-test":"^0.12.7","mocha":"^3.0.2","smtp-server":"^1.14.2"}}');

/***/ })

};
;