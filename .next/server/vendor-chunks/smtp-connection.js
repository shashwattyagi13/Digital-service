"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/smtp-connection";
exports.ids = ["vendor-chunks/smtp-connection"];
exports.modules = {

/***/ "(rsc)/./node_modules/smtp-connection/lib/data-stream.js":
/*!*********************************************************!*\
  !*** ./node_modules/smtp-connection/lib/data-stream.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar stream = __webpack_require__(/*! stream */ \"stream\");\nvar Transform = stream.Transform;\nvar util = __webpack_require__(/*! util */ \"util\");\n\nmodule.exports = DataStream;\n\n/**\n * Escapes dots in the beginning of lines. Ends the stream with <CR><LF>.<CR><LF>\n * Also makes sure that only <CR><LF> sequences are used for linebreaks\n *\n * @param {Object} options Stream options\n */\nfunction DataStream(options) {\n    // init Transform\n    this.options = options || {};\n    this._curLine = '';\n\n    this.inByteCount = 0;\n    this.outByteCount = 0;\n    this.lastByte = false;\n\n    Transform.call(this, this.options);\n}\nutil.inherits(DataStream, Transform);\n\n/**\n * Escapes dots\n */\nDataStream.prototype._transform = function (chunk, encoding, done) {\n    var chunks = [];\n    var chunklen = 0;\n    var i, len, lastPos = 0;\n    var buf;\n\n    if (!chunk || !chunk.length) {\n        return done();\n    }\n\n    if (typeof chunk === 'string') {\n        chunk = new Buffer(chunk);\n    }\n\n    this.inByteCount += chunk.length;\n\n    for (i = 0, len = chunk.length; i < len; i++) {\n        if (chunk[i] === 0x2E) { // .\n            if (\n                (i && chunk[i - 1] === 0x0A) ||\n                (!i && (!this.lastByte || this.lastByte === 0x0A))\n            ) {\n                buf = chunk.slice(lastPos, i + 1);\n                chunks.push(buf);\n                chunks.push(new Buffer('.'));\n                chunklen += buf.length + 1;\n                lastPos = i + 1;\n            }\n        } else if (chunk[i] === 0x0A) { // .\n            if (\n                (i && chunk[i - 1] !== 0x0D) ||\n                (!i && this.lastByte !== 0x0D)\n            ) {\n                if (i > lastPos) {\n                    buf = chunk.slice(lastPos, i);\n                    chunks.push(buf);\n                    chunklen += buf.length + 2;\n                } else {\n                    chunklen += 2;\n                }\n                chunks.push(new Buffer('\\r\\n'));\n                lastPos = i + 1;\n            }\n        }\n    }\n\n    if (chunklen) {\n        // add last piece\n        if (lastPos < chunk.length) {\n            buf = chunk.slice(lastPos);\n            chunks.push(buf);\n            chunklen += buf.length;\n        }\n\n        this.outByteCount += chunklen;\n        this.push(Buffer.concat(chunks, chunklen));\n    } else {\n        this.outByteCount += chunk.length;\n        this.push(chunk);\n    }\n\n    this.lastByte = chunk[chunk.length - 1];\n    done();\n};\n\n/**\n * Finalizes the stream with a dot on a single line\n */\nDataStream.prototype._flush = function (done) {\n    var buf;\n    if (this.lastByte === 0x0A) {\n        buf = new Buffer('.\\r\\n');\n    } else if (this.lastByte === 0x0D) {\n        buf = new Buffer('\\n.\\r\\n');\n    } else {\n        buf = new Buffer('\\r\\n.\\r\\n');\n    }\n    this.outByteCount += buf.length;\n    this.push(buf);\n    done();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc210cC1jb25uZWN0aW9uL2xpYi9kYXRhLXN0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixhQUFhLG1CQUFPLENBQUMsc0JBQVE7QUFDN0I7QUFDQSxXQUFXLG1CQUFPLENBQUMsa0JBQU07O0FBRXpCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsb0NBQW9DLFNBQVM7QUFDN0MsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSw4QkFBOEI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWV0YWJycy8uL25vZGVfbW9kdWxlcy9zbXRwLWNvbm5lY3Rpb24vbGliL2RhdGEtc3RyZWFtLmpzPzAyNDgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG52YXIgVHJhbnNmb3JtID0gc3RyZWFtLlRyYW5zZm9ybTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFTdHJlYW07XG5cbi8qKlxuICogRXNjYXBlcyBkb3RzIGluIHRoZSBiZWdpbm5pbmcgb2YgbGluZXMuIEVuZHMgdGhlIHN0cmVhbSB3aXRoIDxDUj48TEY+LjxDUj48TEY+XG4gKiBBbHNvIG1ha2VzIHN1cmUgdGhhdCBvbmx5IDxDUj48TEY+IHNlcXVlbmNlcyBhcmUgdXNlZCBmb3IgbGluZWJyZWFrc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIFN0cmVhbSBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIERhdGFTdHJlYW0ob3B0aW9ucykge1xuICAgIC8vIGluaXQgVHJhbnNmb3JtXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLl9jdXJMaW5lID0gJyc7XG5cbiAgICB0aGlzLmluQnl0ZUNvdW50ID0gMDtcbiAgICB0aGlzLm91dEJ5dGVDb3VudCA9IDA7XG4gICAgdGhpcy5sYXN0Qnl0ZSA9IGZhbHNlO1xuXG4gICAgVHJhbnNmb3JtLmNhbGwodGhpcywgdGhpcy5vcHRpb25zKTtcbn1cbnV0aWwuaW5oZXJpdHMoRGF0YVN0cmVhbSwgVHJhbnNmb3JtKTtcblxuLyoqXG4gKiBFc2NhcGVzIGRvdHNcbiAqL1xuRGF0YVN0cmVhbS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGRvbmUpIHtcbiAgICB2YXIgY2h1bmtzID0gW107XG4gICAgdmFyIGNodW5rbGVuID0gMDtcbiAgICB2YXIgaSwgbGVuLCBsYXN0UG9zID0gMDtcbiAgICB2YXIgYnVmO1xuXG4gICAgaWYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBkb25lKCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY2h1bmsgPSBuZXcgQnVmZmVyKGNodW5rKTtcbiAgICB9XG5cbiAgICB0aGlzLmluQnl0ZUNvdW50ICs9IGNodW5rLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDAsIGxlbiA9IGNodW5rLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChjaHVua1tpXSA9PT0gMHgyRSkgeyAvLyAuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKGkgJiYgY2h1bmtbaSAtIDFdID09PSAweDBBKSB8fFxuICAgICAgICAgICAgICAgICghaSAmJiAoIXRoaXMubGFzdEJ5dGUgfHwgdGhpcy5sYXN0Qnl0ZSA9PT0gMHgwQSkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBidWYgPSBjaHVuay5zbGljZShsYXN0UG9zLCBpICsgMSk7XG4gICAgICAgICAgICAgICAgY2h1bmtzLnB1c2goYnVmKTtcbiAgICAgICAgICAgICAgICBjaHVua3MucHVzaChuZXcgQnVmZmVyKCcuJykpO1xuICAgICAgICAgICAgICAgIGNodW5rbGVuICs9IGJ1Zi5sZW5ndGggKyAxO1xuICAgICAgICAgICAgICAgIGxhc3RQb3MgPSBpICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjaHVua1tpXSA9PT0gMHgwQSkgeyAvLyAuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKGkgJiYgY2h1bmtbaSAtIDFdICE9PSAweDBEKSB8fFxuICAgICAgICAgICAgICAgICghaSAmJiB0aGlzLmxhc3RCeXRlICE9PSAweDBEKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPiBsYXN0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZiA9IGNodW5rLnNsaWNlKGxhc3RQb3MsIGkpO1xuICAgICAgICAgICAgICAgICAgICBjaHVua3MucHVzaChidWYpO1xuICAgICAgICAgICAgICAgICAgICBjaHVua2xlbiArPSBidWYubGVuZ3RoICsgMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaHVua2xlbiArPSAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaHVua3MucHVzaChuZXcgQnVmZmVyKCdcXHJcXG4nKSk7XG4gICAgICAgICAgICAgICAgbGFzdFBvcyA9IGkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNodW5rbGVuKSB7XG4gICAgICAgIC8vIGFkZCBsYXN0IHBpZWNlXG4gICAgICAgIGlmIChsYXN0UG9zIDwgY2h1bmsubGVuZ3RoKSB7XG4gICAgICAgICAgICBidWYgPSBjaHVuay5zbGljZShsYXN0UG9zKTtcbiAgICAgICAgICAgIGNodW5rcy5wdXNoKGJ1Zik7XG4gICAgICAgICAgICBjaHVua2xlbiArPSBidWYubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vdXRCeXRlQ291bnQgKz0gY2h1bmtsZW47XG4gICAgICAgIHRoaXMucHVzaChCdWZmZXIuY29uY2F0KGNodW5rcywgY2h1bmtsZW4pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm91dEJ5dGVDb3VudCArPSBjaHVuay5sZW5ndGg7XG4gICAgICAgIHRoaXMucHVzaChjaHVuayk7XG4gICAgfVxuXG4gICAgdGhpcy5sYXN0Qnl0ZSA9IGNodW5rW2NodW5rLmxlbmd0aCAtIDFdO1xuICAgIGRvbmUoKTtcbn07XG5cbi8qKlxuICogRmluYWxpemVzIHRoZSBzdHJlYW0gd2l0aCBhIGRvdCBvbiBhIHNpbmdsZSBsaW5lXG4gKi9cbkRhdGFTdHJlYW0ucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7XG4gICAgdmFyIGJ1ZjtcbiAgICBpZiAodGhpcy5sYXN0Qnl0ZSA9PT0gMHgwQSkge1xuICAgICAgICBidWYgPSBuZXcgQnVmZmVyKCcuXFxyXFxuJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxhc3RCeXRlID09PSAweDBEKSB7XG4gICAgICAgIGJ1ZiA9IG5ldyBCdWZmZXIoJ1xcbi5cXHJcXG4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBidWYgPSBuZXcgQnVmZmVyKCdcXHJcXG4uXFxyXFxuJyk7XG4gICAgfVxuICAgIHRoaXMub3V0Qnl0ZUNvdW50ICs9IGJ1Zi5sZW5ndGg7XG4gICAgdGhpcy5wdXNoKGJ1Zik7XG4gICAgZG9uZSgpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/smtp-connection/lib/data-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/smtp-connection/lib/smtp-connection.js":
/*!*************************************************************!*\
  !*** ./node_modules/smtp-connection/lib/smtp-connection.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar packageInfo = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/smtp-connection/package.json\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar util = __webpack_require__(/*! util */ \"util\");\nvar net = __webpack_require__(/*! net */ \"net\");\nvar tls = __webpack_require__(/*! tls */ \"tls\");\nvar os = __webpack_require__(/*! os */ \"os\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar DataStream = __webpack_require__(/*! ./data-stream */ \"(rsc)/./node_modules/smtp-connection/lib/data-stream.js\");\nvar PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nvar shared = __webpack_require__(/*! nodemailer-shared */ \"(rsc)/./node_modules/nodemailer-shared/lib/shared.js\");\nvar ntlm = __webpack_require__(/*! httpntlm/ntlm */ \"(rsc)/./node_modules/httpntlm/ntlm.js\");\n\n// default timeout values in ms\nvar CONNECTION_TIMEOUT = 2 * 60 * 1000; // how much to wait for the connection to be established\nvar SOCKET_TIMEOUT = 10 * 60 * 1000; // how much to wait for socket inactivity before disconnecting the client\nvar GREETING_TIMEOUT = 30 * 1000; // how much to wait after connection is established but SMTP greeting is not receieved\n\nmodule.exports = SMTPConnection;\n\n/**\n * Generates a SMTP connection object\n *\n * Optional options object takes the following possible properties:\n *\n *  * **port** - is the port to connect to (defaults to 25 or 465)\n *  * **host** - is the hostname or IP address to connect to (defaults to 'localhost')\n *  * **secure** - use SSL\n *  * **ignoreTLS** - ignore server support for STARTTLS\n *  * **requireTLS** - forces the client to use STARTTLS\n *  * **name** - the name of the client server\n *  * **localAddress** - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)\n *  * **greetingTimeout** - Time to wait in ms until greeting message is received from the server (defaults to 10000)\n *  * **connectionTimeout** - how many milliseconds to wait for the connection to establish\n *  * **socketTimeout** - Time of inactivity until the connection is closed (defaults to 1 hour)\n *  * **lmtp** - if true, uses LMTP instead of SMTP protocol\n *  * **logger** - bunyan compatible logger interface\n *  * **debug** - if true pass SMTP traffic to the logger\n *  * **tls** - options for createCredentials\n *  * **socket** - existing socket to use instead of creating a new one (see: http://nodejs.org/api/net.html#net_class_net_socket)\n *  * **secured** - boolean indicates that the provided socket has already been upgraded to tls\n *\n * @constructor\n * @namespace SMTP Client module\n * @param {Object} [options] Option properties\n */\nfunction SMTPConnection(options) {\n    EventEmitter.call(this);\n\n    this.id = crypto.randomBytes(8).toString('base64').replace(/\\W/g, '');\n    this.stage = 'init';\n\n    this.options = options || {};\n\n    this.secureConnection = !!this.options.secure;\n    this.alreadySecured = !!this.options.secured;\n\n    this.port = this.options.port || (this.secureConnection ? 465 : 25);\n    this.host = this.options.host || 'localhost';\n\n    if (typeof this.options.secure === 'undefined' && this.port === 465) {\n        // if secure option is not set but port is 465, then default to secure\n        this.secureConnection = true;\n    }\n\n    this.name = this.options.name || this._getHostname();\n\n    this.logger = shared.getLogger(this.options);\n\n    /**\n     * Expose version nr, just for the reference\n     * @type {String}\n     */\n    this.version = packageInfo.version;\n\n    /**\n     * If true, then the user is authenticated\n     * @type {Boolean}\n     */\n    this.authenticated = false;\n\n    /**\n     * If set to true, this instance is no longer active\n     * @private\n     */\n    this.destroyed = false;\n\n    /**\n     * Defines if the current connection is secure or not. If not,\n     * STARTTLS can be used if available\n     * @private\n     */\n    this.secure = !!this.secureConnection;\n\n    /**\n     * Store incomplete messages coming from the server\n     * @private\n     */\n    this._remainder = '';\n\n    /**\n     * Unprocessed responses from the server\n     * @type {Array}\n     */\n    this._responseQueue = [];\n\n    /**\n     * The socket connecting to the server\n     * @publick\n     */\n    this._socket = false;\n\n    /**\n     * Lists supported auth mechanisms\n     * @private\n     */\n    this._supportedAuth = [];\n\n    /**\n     * Includes current envelope (from, to)\n     * @private\n     */\n    this._envelope = false;\n\n    /**\n     * Lists supported extensions\n     * @private\n     */\n    this._supportedExtensions = [];\n\n    /**\n     * Defines the maximum allowed size for a single message\n     * @private\n     */\n    this._maxAllowedSize = 0;\n\n    /**\n     * Function queue to run if a data chunk comes from the server\n     * @private\n     */\n    this._responseActions = [];\n    this._recipientQueue = [];\n\n    /**\n     * Timeout variable for waiting the greeting\n     * @private\n     */\n    this._greetingTimeout = false;\n\n    /**\n     * Timeout variable for waiting the connection to start\n     * @private\n     */\n    this._connectionTimeout = false;\n\n    /**\n     * If the socket is deemed already closed\n     * @private\n     */\n    this._destroyed = false;\n\n    /**\n     * If the socket is already being closed\n     * @private\n     */\n    this._closing = false;\n}\nutil.inherits(SMTPConnection, EventEmitter);\n\n/**\n * Creates a connection to a SMTP server and sets up connection\n * listener\n */\nSMTPConnection.prototype.connect = function (connectCallback) {\n    if (typeof connectCallback === 'function') {\n        this.once('connect', function () {\n            this.logger.debug('[%s] SMTP handshake finished', this.id);\n            connectCallback();\n        }.bind(this));\n    }\n\n    var opts = {\n        port: this.port,\n        host: this.host\n    };\n\n    if (this.options.localAddress) {\n        opts.localAddress = this.options.localAddress;\n    }\n\n    if (this.options.connection) {\n        // connection is already opened\n        this._socket = this.options.connection;\n        if (this.secureConnection && !this.alreadySecured) {\n            setImmediate(this._upgradeConnection.bind(this, function (err) {\n                if (err) {\n                    this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'CONN');\n                    return;\n                }\n                this._onConnect();\n            }.bind(this)));\n        } else {\n            setImmediate(this._onConnect.bind(this));\n        }\n    } else if (this.options.socket) {\n        // socket object is set up but not yet connected\n        this._socket = this.options.socket;\n        try {\n            this._socket.connect(this.port, this.host, this._onConnect.bind(this));\n        } catch (E) {\n            return setImmediate(this._onError.bind(this, E, 'ECONNECTION', false, 'CONN'));\n        }\n    } else if (this.secureConnection) {\n        // connect using tls\n        if (this.options.tls) {\n            Object.keys(this.options.tls).forEach(function (key) {\n                opts[key] = this.options.tls[key];\n            }.bind(this));\n        }\n        try {\n            this._socket = tls.connect(this.port, this.host, opts, this._onConnect.bind(this));\n        } catch (E) {\n            return setImmediate(this._onError.bind(this, E, 'ECONNECTION', false, 'CONN'));\n        }\n    } else {\n        // connect using plaintext\n        try {\n            this._socket = net.connect(opts, this._onConnect.bind(this));\n        } catch (E) {\n            return setImmediate(this._onError.bind(this, E, 'ECONNECTION', false, 'CONN'));\n        }\n    }\n\n    this._connectionTimeout = setTimeout(function () {\n        this._onError('Connection timeout', 'ETIMEDOUT', false, 'CONN');\n    }.bind(this), this.options.connectionTimeout || CONNECTION_TIMEOUT);\n\n    this._socket.on('error', function (err) {\n        this._onError(err, 'ECONNECTION', false, 'CONN');\n    }.bind(this));\n};\n\n/**\n * Sends QUIT\n */\nSMTPConnection.prototype.quit = function () {\n    this._sendCommand('QUIT');\n    this._responseActions.push(this.close);\n};\n\n/**\n * Closes the connection to the server\n */\nSMTPConnection.prototype.close = function () {\n    clearTimeout(this._connectionTimeout);\n    clearTimeout(this._greetingTimeout);\n    this._responseActions = [];\n\n    // allow to run this function only once\n    if (this._closing) {\n        return;\n    }\n    this._closing = true;\n\n    var closeMethod = 'end';\n\n    if (this.stage === 'init') {\n        // Close the socket immediately when connection timed out\n        closeMethod = 'destroy';\n    }\n\n    this.logger.debug('[%s] Closing connection to the server using \"%s\"', this.id, closeMethod);\n\n    var socket = this._socket && this._socket.socket || this._socket;\n\n    if (socket && !socket.destroyed) {\n        try {\n            this._socket[closeMethod]();\n        } catch (E) {\n            // just ignore\n        }\n    }\n\n    this._destroy();\n};\n\n/**\n * Authenticate user\n */\nSMTPConnection.prototype.login = function (authData, callback) {\n    this._auth = authData || {};\n    this._user = this._auth.xoauth2 && this._auth.xoauth2.options && this._auth.xoauth2.options.user || this._auth.user || '';\n\n    this._authMethod = false;\n    if (this.options.authMethod) {\n        this._authMethod = this.options.authMethod.toUpperCase().trim();\n    } else if (this._auth.xoauth2 && this._supportedAuth.indexOf('XOAUTH2') >= 0) {\n        this._authMethod = 'XOAUTH2';\n    } else if (this._auth.domain && this._supportedAuth.indexOf('NTLM') >= 0) {\n        this._authMethod = 'NTLM';\n    } else {\n        // use first supported\n        this._authMethod = (this._supportedAuth[0] || 'PLAIN').toUpperCase().trim();\n    }\n\n    switch (this._authMethod) {\n        case 'XOAUTH2':\n            this._handleXOauth2Token(false, callback);\n            return;\n        case 'LOGIN':\n            this._responseActions.push(function (str) {\n                this._actionAUTH_LOGIN_USER(str, callback);\n            }.bind(this));\n            this._sendCommand('AUTH LOGIN');\n            return;\n        case 'PLAIN':\n            this._responseActions.push(function (str) {\n                this._actionAUTHComplete(str, callback);\n            }.bind(this));\n            this._sendCommand('AUTH PLAIN ' + new Buffer(\n                //this._auth.user+'\\u0000'+\n                '\\u0000' + // skip authorization identity as it causes problems with some servers\n                this._auth.user + '\\u0000' +\n                this._auth.pass, 'utf-8').toString('base64'));\n            return;\n        case 'CRAM-MD5':\n            this._responseActions.push(function (str) {\n                this._actionAUTH_CRAM_MD5(str, callback);\n            }.bind(this));\n            this._sendCommand('AUTH CRAM-MD5');\n            return;\n        case 'NTLM':\n            this._responseActions.push(function (str) {\n                this._actionAUTH_NTLM_TYPE1(str, callback);\n            }.bind(this));\n            this._sendCommand('AUTH ' + ntlm.createType1Message({\n                domain: this._auth.domain || '',\n                workstation: this._auth.workstation || ''\n            }));\n            return;\n    }\n\n    return callback(this._formatError('Unknown authentication method \"' + this._authMethod + '\"', 'EAUTH', false, 'API'));\n};\n\n/**\n * Sends a message\n *\n * @param {Object} envelope Envelope object, {from: addr, to: [addr]}\n * @param {Object} message String, Buffer or a Stream\n * @param {Function} callback Callback to return once sending is completed\n */\nSMTPConnection.prototype.send = function (envelope, message, done) {\n    if (!message) {\n        return done(this._formatError('Empty message', 'EMESSAGE', false, 'API'));\n    }\n\n    // reject larger messages than allowed\n    if (this._maxAllowedSize && envelope.size > this._maxAllowedSize) {\n        return setImmediate(function () {\n            done(this._formatError('Message size larger than allowed ' + this._maxAllowedSize, 'EMESSAGE', false, 'MAIL FROM'));\n        }.bind(this));\n    }\n\n    // ensure that callback is only called once\n    var returned = false;\n    var callback = function () {\n        if (returned) {\n            return;\n        }\n        returned = true;\n\n        done.apply(null, Array.prototype.slice.call(arguments));\n    };\n\n    if (typeof message.on === 'function') {\n        message.on('error', function (err) {\n            return callback(this._formatError(err, 'ESTREAM', false, 'API'));\n        }.bind(this));\n    }\n\n    this._setEnvelope(envelope, function (err, info) {\n        if (err) {\n            return callback(err);\n        }\n        var stream = this._createSendStream(function (err, str) {\n            if (err) {\n                return callback(err);\n            }\n            info.response = str;\n            return callback(null, info);\n        });\n        if (typeof message.pipe === 'function') {\n            message.pipe(stream);\n        } else {\n            stream.write(message);\n            stream.end();\n        }\n\n    }.bind(this));\n};\n\n/**\n * Resets connection state\n *\n * @param {Function} callback Callback to return once connection is reset\n */\nSMTPConnection.prototype.reset = function (callback) {\n    this._sendCommand('RSET');\n    this._responseActions.push(function (str) {\n        if (str.charAt(0) !== '2') {\n            return callback(this._formatError('Could not reset session state:\\n' + str, 'EPROTOCOL', str, 'RSET'));\n        }\n        this._envelope = false;\n        return callback(null, true);\n    }.bind(this));\n};\n\n/**\n * Connection listener that is run when the connection to\n * the server is opened\n *\n * @event\n */\nSMTPConnection.prototype._onConnect = function () {\n    clearTimeout(this._connectionTimeout);\n\n    this.logger.info('[%s] %s established to %s:%s', this.id, this.secure ? 'Secure connection' : 'Connection', this._socket.remoteAddress, this._socket.remotePort);\n\n    if (this._destroyed) {\n        // Connection was established after we already had canceled it\n        this.close();\n        return;\n    }\n\n    this.stage = 'connected';\n\n    // clear existing listeners for the socket\n    this._socket.removeAllListeners('data');\n    this._socket.removeAllListeners('timeout');\n    this._socket.removeAllListeners('close');\n    this._socket.removeAllListeners('end');\n\n    this._socket.on('data', this._onData.bind(this));\n    this._socket.once('close', this._onClose.bind(this));\n    this._socket.once('end', this._onEnd.bind(this));\n\n    this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT);\n    this._socket.on('timeout', this._onTimeout.bind(this));\n\n    this._greetingTimeout = setTimeout(function () {\n        // if still waiting for greeting, give up\n        if (this._socket && !this._destroyed && this._responseActions[0] === this._actionGreeting) {\n            this._onError('Greeting never received', 'ETIMEDOUT', false, 'CONN');\n        }\n    }.bind(this), this.options.greetingTimeout || GREETING_TIMEOUT);\n\n    this._responseActions.push(this._actionGreeting);\n\n    // we have a 'data' listener set up so resume socket if it was paused\n    this._socket.resume();\n};\n\n/**\n * 'data' listener for data coming from the server\n *\n * @event\n * @param {Buffer} chunk Data chunk coming from the server\n */\nSMTPConnection.prototype._onData = function (chunk) {\n    if (this._destroyed || !chunk || !chunk.length) {\n        return;\n    }\n\n    var data = (chunk || '').toString('binary');\n    var lines = (this._remainder + data).split(/\\r?\\n/);\n    var lastline;\n\n    this._remainder = lines.pop();\n\n    for (var i = 0, len = lines.length; i < len; i++) {\n        if (this._responseQueue.length) {\n            lastline = this._responseQueue[this._responseQueue.length - 1];\n            if (/^\\d+\\-/.test(lastline.split('\\n').pop())) {\n                this._responseQueue[this._responseQueue.length - 1] += '\\n' + lines[i];\n                continue;\n            }\n        }\n        this._responseQueue.push(lines[i]);\n    }\n\n    this._processResponse();\n};\n\n/**\n * 'error' listener for the socket\n *\n * @event\n * @param {Error} err Error object\n * @param {String} type Error name\n */\nSMTPConnection.prototype._onError = function (err, type, data, command) {\n    clearTimeout(this._connectionTimeout);\n    clearTimeout(this._greetingTimeout);\n\n    if (this._destroyed) {\n        // just ignore, already closed\n        // this might happen when a socket is canceled because of reached timeout\n        // but the socket timeout error itself receives only after\n        return;\n    }\n\n    err = this._formatError(err, type, data, command);\n\n    this.logger.error('[%s] %s', this.id, err.message);\n\n    this.emit('error', err);\n    this.close();\n};\n\nSMTPConnection.prototype._formatError = function (message, type, response, command) {\n    var err;\n\n    if (/Error\\]$/i.test(Object.prototype.toString.call(message))) {\n        err = message;\n    } else {\n        err = new Error(message);\n    }\n\n    if (type && type !== 'Error') {\n        err.code = type;\n    }\n\n    if (response) {\n        err.response = response;\n        err.message += ': ' + response;\n    }\n\n    var responseCode = typeof response === 'string' && Number((response.match(/^\\d+/) || [])[0]) || false;\n    if (responseCode) {\n        err.responseCode = responseCode;\n    }\n\n    if (command) {\n        err.command = command;\n    }\n\n    return err;\n};\n\n/**\n * 'close' listener for the socket\n *\n * @event\n */\nSMTPConnection.prototype._onClose = function () {\n    this.logger.info('[%s] Connection closed', this.id);\n\n    if ([this._actionGreeting, this.close].indexOf(this._responseActions[0]) < 0 && !this._destroyed) {\n        return this._onError(new Error('Connection closed unexpectedly'), 'ECONNECTION', false, 'CONN');\n    }\n\n    this._destroy();\n};\n\n/**\n * 'end' listener for the socket\n *\n * @event\n */\nSMTPConnection.prototype._onEnd = function () {\n    this._destroy();\n};\n\n/**\n * 'timeout' listener for the socket\n *\n * @event\n */\nSMTPConnection.prototype._onTimeout = function () {\n    return this._onError(new Error('Timeout'), 'ETIMEDOUT', false, 'CONN');\n};\n\n/**\n * Destroys the client, emits 'end'\n */\nSMTPConnection.prototype._destroy = function () {\n    if (this._destroyed) {\n        return;\n    }\n    this._destroyed = true;\n    this.emit('end');\n};\n\n/**\n * Upgrades the connection to TLS\n *\n * @param {Function} callback Callback function to run when the connection\n *        has been secured\n */\nSMTPConnection.prototype._upgradeConnection = function (callback) {\n    // do not remove all listeners or it breaks node v0.10 as there's\n    // apparently a 'finish' event set that would be cleared as well\n\n    // we can safely keep 'error', 'end', 'close' etc. events\n    this._socket.removeAllListeners('data'); // incoming data is going to be gibberish from this point onwards\n    this._socket.removeAllListeners('timeout'); // timeout will be re-set for the new socket object\n\n    var socketPlain = this._socket;\n    var opts = {\n        socket: this._socket,\n        host: this.host\n    };\n\n    Object.keys(this.options.tls || {}).forEach(function (key) {\n        opts[key] = this.options.tls[key];\n    }.bind(this));\n\n    this._socket = tls.connect(opts, function () {\n        this.secure = true;\n        this._socket.on('data', this._onData.bind(this));\n\n        socketPlain.removeAllListeners('close');\n        socketPlain.removeAllListeners('end');\n\n        return callback(null, true);\n    }.bind(this));\n\n    this._socket.on('error', this._onError.bind(this));\n    this._socket.once('close', this._onClose.bind(this));\n    this._socket.once('end', this._onEnd.bind(this));\n\n    this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT); // 10 min.\n    this._socket.on('timeout', this._onTimeout.bind(this));\n\n    // resume in case the socket was paused\n    socketPlain.resume();\n};\n\n/**\n * Processes queued responses from the server\n *\n * @param {Boolean} force If true, ignores _processing flag\n */\nSMTPConnection.prototype._processResponse = function () {\n    if (!this._responseQueue.length) {\n        return false;\n    }\n\n    var str = (this._responseQueue.shift() || '').toString();\n\n    if (/^\\d+\\-/.test(str.split('\\n').pop())) {\n        // keep waiting for the final part of multiline response\n        return;\n    }\n\n    if (this.options.debug) {\n        this.logger.debug('[%s] S: %s', this.id, str.replace(/\\r?\\n$/, ''));\n    }\n\n    if (!str.trim()) { // skip unexpected empty lines\n        setImmediate(this._processResponse.bind(this, true));\n    }\n\n    var action = this._responseActions.shift();\n\n    if (typeof action === 'function') {\n        action.call(this, str);\n        setImmediate(this._processResponse.bind(this, true));\n    } else {\n        return this._onError(new Error('Unexpected Response'), 'EPROTOCOL', str, 'CONN');\n    }\n};\n\n/**\n * Send a command to the server, append \\r\\n\n *\n * @param {String} str String to be sent to the server\n */\nSMTPConnection.prototype._sendCommand = function (str) {\n    if (this._destroyed) {\n        // Connection already closed, can't send any more data\n        return;\n    }\n\n    if (this._socket.destroyed) {\n        return this.close();\n    }\n\n    if (this.options.debug) {\n        this.logger.debug('[%s] C: %s', this.id, (str || '').toString().replace(/\\r?\\n$/, ''));\n    }\n\n    this._socket.write(new Buffer(str + '\\r\\n', 'utf-8'));\n};\n\n/**\n * Initiates a new message by submitting envelope data, starting with\n * MAIL FROM: command\n *\n * @param {Object} envelope Envelope object in the form of\n *        {from:'...', to:['...']}\n *        or\n *        {from:{address:'...',name:'...'}, to:[address:'...',name:'...']}\n */\nSMTPConnection.prototype._setEnvelope = function (envelope, callback) {\n    var args = [];\n    var useSmtpUtf8 = false;\n\n    this._envelope = envelope || {};\n    this._envelope.from = (this._envelope.from && this._envelope.from.address || this._envelope.from || '').toString().trim();\n\n    this._envelope.to = [].concat(this._envelope.to || []).map(function (to) {\n        return (to && to.address || to || '').toString().trim();\n    });\n\n    if (!this._envelope.to.length) {\n        return callback(this._formatError('No recipients defined', 'EENVELOPE', false, 'API'));\n    }\n\n    if (this._envelope.from && /[\\r\\n<>]/.test(this._envelope.from)) {\n        return callback(this._formatError('Invalid sender ' + JSON.stringify(this._envelope.from), 'EENVELOPE', false, 'API'));\n    }\n\n    // check if the sender address uses only ASCII characters,\n    // otherwise require usage of SMTPUTF8 extension\n    if (/[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n        useSmtpUtf8 = true;\n    }\n\n    for (var i = 0, len = this._envelope.to.length; i < len; i++) {\n        if (!this._envelope.to[i] || /[\\r\\n<>]/.test(this._envelope.to[i])) {\n            return callback(this._formatError('Invalid recipient ' + JSON.stringify(this._envelope.to[i]), 'EENVELOPE', false, 'API'));\n        }\n\n        // check if the recipients addresses use only ASCII characters,\n        // otherwise require usage of SMTPUTF8 extension\n        if (/[\\x80-\\uFFFF]/.test(this._envelope.to[i])) {\n            useSmtpUtf8 = true;\n        }\n    }\n\n    // clone the recipients array for latter manipulation\n    this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));\n    this._envelope.rejected = [];\n    this._envelope.rejectedErrors = [];\n    this._envelope.accepted = [];\n\n    if (this._envelope.dsn) {\n        try {\n            this._envelope.dsn = this._setDsnEnvelope(this._envelope.dsn);\n        } catch (err) {\n            return callback(this._formatError('Invalid dsn ' + err.message, 'EENVELOPE', false, 'API'));\n        }\n    }\n\n    this._responseActions.push(function (str) {\n        this._actionMAIL(str, callback);\n    }.bind(this));\n\n    // If the server supports SMTPUTF8 and the envelope includes an internationalized\n    // email address then append SMTPUTF8 keyword to the MAIL FROM command\n    if (useSmtpUtf8 && this._supportedExtensions.indexOf('SMTPUTF8') >= 0) {\n        args.push('SMTPUTF8');\n        this._usingSmtpUtf8 = true;\n    }\n\n    // If the server supports 8BITMIME and the message might contain non-ascii bytes\n    // then append the 8BITMIME keyword to the MAIL FROM command\n    if (this._envelope.use8BitMime && this._supportedExtensions.indexOf('8BITMIME') >= 0) {\n        args.push('BODY=8BITMIME');\n        this._using8BitMime = true;\n    }\n\n    if (this._envelope.size && this._supportedExtensions.indexOf('SIZE') >= 0) {\n        args.push('SIZE=' + this._envelope.size);\n    }\n\n    // If the server supports DSN and the envelope includes an DSN prop\n    // then append DSN params to the MAIL FROM command\n    if (this._envelope.dsn && this._supportedExtensions.indexOf('DSN') >= 0) {\n        if (this._envelope.dsn.ret) {\n            args.push('RET=' + this._envelope.dsn.ret);\n        }\n        if (this._envelope.dsn.envid) {\n            args.push('ENVID=' + this._envelope.dsn.envid);\n        }\n    }\n\n    this._sendCommand('MAIL FROM:<' + (this._envelope.from) + '>' + (args.length ? ' ' + args.join(' ') : ''));\n};\n\nSMTPConnection.prototype._setDsnEnvelope = function (params) {\n    var ret = params.ret ? params.ret.toString().toUpperCase() : null;\n    if (ret && ['FULL', 'HDRS'].indexOf(ret) < 0) {\n        throw new Error('ret: ' + JSON.stringify(ret));\n    }\n    var envid = params.envid ? params.envid.toString() : null;\n    var notify = params.notify ? params.notify : null;\n    if (notify) {\n        if (typeof notify === 'string') {\n            notify = notify.split(',');\n        }\n        notify = notify.map(function (n) {\n            return n.trim().toUpperCase();\n        });\n        var validNotify = ['NEVER', 'SUCCESS', 'FAILURE', 'DELAY'];\n        var invaliNotify = notify.filter(function (n) {\n            return validNotify.indexOf(n) === -1;\n        });\n        if (invaliNotify.length || (notify.length > 1 && notify.indexOf('NEVER') >= 0)) {\n            throw new Error('notify: ' + JSON.stringify(notify.join(',')));\n        }\n        notify = notify.join(',');\n    }\n    var orcpt = params.orcpt ? params.orcpt.toString() : null;\n    return {\n        ret: ret,\n        envid: envid,\n        notify: notify,\n        orcpt: orcpt\n    };\n};\n\nSMTPConnection.prototype._getDsnRcptToArgs = function () {\n    var args = [];\n    // If the server supports DSN and the envelope includes an DSN prop\n    // then append DSN params to the RCPT TO command\n    if (this._envelope.dsn && this._supportedExtensions.indexOf('DSN') >= 0) {\n        if (this._envelope.dsn.notify) {\n            args.push('NOTIFY=' + this._envelope.dsn.notify);\n        }\n        if (this._envelope.dsn.orcpt) {\n            args.push('ORCPT=' + this._envelope.dsn.orcpt);\n        }\n    }\n    return (args.length ? ' ' + args.join(' ') : '');\n};\n\nSMTPConnection.prototype._createSendStream = function (callback) {\n    var dataStream = new DataStream();\n    var logStream;\n\n    if (this.options.lmtp) {\n        this._envelope.accepted.forEach(function (recipient, i) {\n            var final = i === this._envelope.accepted.length - 1;\n            this._responseActions.push(function (str) {\n                this._actionLMTPStream(recipient, final, str, callback);\n            }.bind(this));\n        }.bind(this));\n    } else {\n        this._responseActions.push(function (str) {\n            this._actionSMTPStream(str, callback);\n        }.bind(this));\n    }\n\n    dataStream.pipe(this._socket, {\n        end: false\n    });\n\n    if (this.options.debug) {\n        logStream = new PassThrough();\n        logStream.on('readable', function () {\n            var chunk;\n            while ((chunk = logStream.read())) {\n                this.logger.debug('[%s] C: %s', this.id, chunk.toString('binary').replace(/\\r?\\n$/, ''));\n            }\n        }.bind(this));\n        dataStream.pipe(logStream);\n    }\n\n    dataStream.once('end', function () {\n        this.logger.info('[%s] C: <%s bytes encoded mime message (source size %s bytes)>', this.id, dataStream.outByteCount, dataStream.inByteCount);\n    }.bind(this));\n\n    return dataStream;\n};\n\n/** ACTIONS **/\n\n/**\n * Will be run after the connection is created and the server sends\n * a greeting. If the incoming message starts with 220 initiate\n * SMTP session by sending EHLO command\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionGreeting = function (str) {\n    clearTimeout(this._greetingTimeout);\n\n    if (str.substr(0, 3) !== '220') {\n        this._onError(new Error('Invalid greeting from server:\\n' + str), 'EPROTOCOL', str, 'CONN');\n        return;\n    }\n\n    if (this.options.lmtp) {\n        this._responseActions.push(this._actionLHLO);\n        this._sendCommand('LHLO ' + this.name);\n    } else {\n        this._responseActions.push(this._actionEHLO);\n        this._sendCommand('EHLO ' + this.name);\n    }\n};\n\n/**\n * Handles server response for LHLO command. If it yielded in\n * error, emit 'error', otherwise treat this as an EHLO response\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionLHLO = function (str) {\n    if (str.charAt(0) !== '2') {\n        this._onError(new Error('Invalid response for LHLO:\\n' + str), 'EPROTOCOL', str, 'LHLO');\n        return;\n    }\n\n    this._actionEHLO(str);\n};\n\n/**\n * Handles server response for EHLO command. If it yielded in\n * error, try HELO instead, otherwise initiate TLS negotiation\n * if STARTTLS is supported by the server or move into the\n * authentication phase.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionEHLO = function (str) {\n    var match;\n\n    if (str.substr(0, 3) === '421') {\n        this._onError(new Error('Server terminates connection:\\n' + str), 'ECONNECTION', str, 'EHLO');\n        return;\n    }\n\n    if (str.charAt(0) !== '2') {\n        if (this.options.requireTLS) {\n            this._onError(new Error('EHLO failed but HELO does not support required STARTTLS:\\n' + str), 'ECONNECTION', str, 'EHLO');\n            return;\n        }\n\n        // Try HELO instead\n        this._responseActions.push(this._actionHELO);\n        this._sendCommand('HELO ' + this.name);\n        return;\n    }\n\n    // Detect if the server supports STARTTLS\n    if (!this.secure && !this.options.ignoreTLS && (/[ \\-]STARTTLS\\b/mi.test(str) || this.options.requireTLS)) {\n        this._sendCommand('STARTTLS');\n        this._responseActions.push(this._actionSTARTTLS);\n        return;\n    }\n\n    // Detect if the server supports SMTPUTF8\n    if (/[ \\-]SMTPUTF8\\b/mi.test(str)) {\n        this._supportedExtensions.push('SMTPUTF8');\n    }\n\n    // Detect if the server supports DSN\n    if (/[ \\-]DSN\\b/mi.test(str)) {\n        this._supportedExtensions.push('DSN');\n    }\n\n    // Detect if the server supports 8BITMIME\n    if (/[ \\-]8BITMIME\\b/mi.test(str)) {\n        this._supportedExtensions.push('8BITMIME');\n    }\n\n    // Detect if the server supports PIPELINING\n    if (/[ \\-]PIPELINING\\b/mi.test(str)) {\n        this._supportedExtensions.push('PIPELINING');\n    }\n\n    // Detect if the server supports PLAIN auth\n    if (/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)PLAIN/i.test(str)) {\n        this._supportedAuth.push('PLAIN');\n    }\n\n    // Detect if the server supports LOGIN auth\n    if (/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)LOGIN/i.test(str)) {\n        this._supportedAuth.push('LOGIN');\n    }\n\n    // Detect if the server supports CRAM-MD5 auth\n    if (/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)CRAM-MD5/i.test(str)) {\n        this._supportedAuth.push('CRAM-MD5');\n    }\n\n    // Detect if the server supports XOAUTH2 auth\n    if (/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH2/i.test(str)) {\n        this._supportedAuth.push('XOAUTH2');\n    }\n\n    // Detect if the server supports SIZE extensions (and the max allowed size)\n    if ((match = str.match(/[ \\-]SIZE(?:\\s+(\\d+))?/mi))) {\n        this._supportedExtensions.push('SIZE');\n        this._maxAllowedSize = Number(match[1]) || 0;\n    }\n\n    this.emit('connect');\n};\n\n/**\n * Handles server response for HELO command. If it yielded in\n * error, emit 'error', otherwise move into the authentication phase.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionHELO = function (str) {\n    if (str.charAt(0) !== '2') {\n        this._onError(new Error('Invalid response for EHLO/HELO:\\n' + str), 'EPROTOCOL', str, 'HELO');\n        return;\n    }\n\n    this.emit('connect');\n};\n\n/**\n * Handles server response for STARTTLS command. If there's an error\n * try HELO instead, otherwise initiate TLS upgrade. If the upgrade\n * succeedes restart the EHLO\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionSTARTTLS = function (str) {\n    if (str.charAt(0) !== '2') {\n        if (this.options.opportunisticTLS) {\n            this.logger.info('[%s] Failed STARTTLS upgrade, continuing unencrypted', this.id);\n            return this.emit('connect');\n        }\n        this._onError(new Error('Error upgrading connection with STARTTLS'), 'ETLS', str, 'STARTTLS');\n        return;\n    }\n\n    this._upgradeConnection(function (err, secured) {\n        if (err) {\n            this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'STARTTLS');\n            return;\n        }\n\n        this.logger.info('[%s] Connection upgraded with STARTTLS', this.id);\n\n        if (secured) {\n            // restart session\n            this._responseActions.push(this._actionEHLO);\n            this._sendCommand('EHLO ' + this.name);\n        } else {\n            this.emit('connect');\n        }\n    }.bind(this));\n};\n\n/**\n * Handle the response for AUTH LOGIN command. We are expecting\n * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as\n * response needs to be base64 encoded username.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTH_LOGIN_USER = function (str, callback) {\n    if (str !== '334 VXNlcm5hbWU6') {\n        callback(this._formatError('Invalid login sequence while waiting for \"334 VXNlcm5hbWU6\"', 'EAUTH', str, 'AUTH LOGIN'));\n        return;\n    }\n\n    this._responseActions.push(function (str) {\n        this._actionAUTH_LOGIN_PASS(str, callback);\n    }.bind(this));\n\n    this._sendCommand(new Buffer(this._auth.user + '', 'utf-8').toString('base64'));\n};\n\n/**\n * Handle the response for AUTH NTLM, which should be a\n * '334 <challenge string>'. See http://davenport.sourceforge.net/ntlm.html\n * We already sent the Type1 message, the challenge is a Type2 message, we\n * need to respond with a Type3 message.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTH_NTLM_TYPE1 = function (str, callback) {\n    var challengeMatch = str.match(/^334\\s+(.+)$/);\n    var challengeString = '';\n\n    if (!challengeMatch) {\n        return callback(this._formatError('Invalid login sequence while waiting for server challenge string', 'EAUTH', str, 'AUTH NTLM'));\n    } else {\n        challengeString = challengeMatch[1];\n    }\n\n    if (!/^NTLM/i.test(challengeString)) {\n        challengeString = 'NTLM ' + challengeString;\n    }\n\n    var type2Message = ntlm.parseType2Message(challengeString, callback);\n    if (!type2Message) {\n        return;\n    }\n\n    var type3Message = ntlm.createType3Message(type2Message, {\n        domain: this._auth.domain || '',\n        workstation: this._auth.workstation || '',\n        username: this._auth.user,\n        password: this._auth.pass\n    });\n\n    type3Message = type3Message.substring(5); // remove the \"NTLM \" prefix\n\n    this._responseActions.push(function (str) {\n        this._actionAUTH_NTLM_TYPE3(str, callback);\n    }.bind(this));\n\n    this._sendCommand(type3Message);\n};\n\n/**\n * Handle the response for AUTH CRAM-MD5 command. We are expecting\n * '334 <challenge string>'. Data to be sent as response needs to be\n * base64 decoded challenge string, MD5 hashed using the password as\n * a HMAC key, prefixed by the username and a space, and finally all\n * base64 encoded again.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTH_CRAM_MD5 = function (str, callback) {\n    var challengeMatch = str.match(/^334\\s+(.+)$/);\n    var challengeString = '';\n\n    if (!challengeMatch) {\n        return callback(this._formatError('Invalid login sequence while waiting for server challenge string', 'EAUTH', str, 'AUTH CRAM-MD5'));\n    } else {\n        challengeString = challengeMatch[1];\n    }\n\n    // Decode from base64\n    var base64decoded = new Buffer(challengeString, 'base64').toString('ascii'),\n        hmac_md5 = crypto.createHmac('md5', this._auth.pass);\n\n    hmac_md5.update(base64decoded);\n\n    var hex_hmac = hmac_md5.digest('hex'),\n        prepended = this._auth.user + ' ' + hex_hmac;\n\n    this._responseActions.push(function (str) {\n        this._actionAUTH_CRAM_MD5_PASS(str, callback);\n    }.bind(this));\n\n\n    this._sendCommand(new Buffer(prepended).toString('base64'));\n};\n\n/**\n * Handles the response to CRAM-MD5 authentication, if there's no error,\n * the user can be considered logged in. Start waiting for a message to send\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTH_CRAM_MD5_PASS = function (str, callback) {\n    if (!str.match(/^235\\s+/)) {\n        return callback(this._formatError('Invalid login sequence while waiting for \"235\"', 'EAUTH', str, 'AUTH CRAM-MD5'));\n    }\n\n    this.logger.info('[%s] User %s authenticated', this.id, JSON.stringify(this._user));\n    this.authenticated = true;\n    callback(null, true);\n};\n\n/**\n * Handles the TYPE3 response for NTLM authentication, if there's no error,\n * the user can be considered logged in. Start waiting for a message to send\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTH_NTLM_TYPE3 = function (str, callback) {\n    if (!str.match(/^235\\s+/)) {\n        return callback(this._formatError('Invalid login sequence while waiting for \"235\"', 'EAUTH', str, 'AUTH NTLM'));\n    }\n\n    this.logger.info('[%s] User %s authenticated', this.id, JSON.stringify(this._user));\n    this.authenticated = true;\n    callback(null, true);\n};\n\n/**\n * Handle the response for AUTH LOGIN command. We are expecting\n * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as\n * response needs to be base64 encoded password.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTH_LOGIN_PASS = function (str, callback) {\n    if (str !== '334 UGFzc3dvcmQ6') {\n        return callback(this._formatError('Invalid login sequence while waiting for \"334 UGFzc3dvcmQ6\"', 'EAUTH', str, 'AUTH LOGIN'));\n    }\n\n    this._responseActions.push(function (str) {\n        this._actionAUTHComplete(str, callback);\n    }.bind(this));\n\n    this._sendCommand(new Buffer(this._auth.pass + '', 'utf-8').toString('base64'));\n};\n\n/**\n * Handles the response for authentication, if there's no error,\n * the user can be considered logged in. Start waiting for a message to send\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTHComplete = function (str, isRetry, callback) {\n    if (!callback && typeof isRetry === 'function') {\n        callback = isRetry;\n        isRetry = undefined;\n    }\n\n    if (str.substr(0, 3) === '334') {\n        this._responseActions.push(function (str) {\n            if (isRetry || !this._auth.xoauth2 || typeof this._auth.xoauth2 !== 'object') {\n                this._actionAUTHComplete(str, true, callback);\n            } else {\n                setTimeout(this._handleXOauth2Token.bind(this, true, callback), Math.random() * 4000 + 1000);\n            }\n        }.bind(this));\n        this._sendCommand('');\n        return;\n    }\n\n    if (str.charAt(0) !== '2') {\n        this.logger.info('[%s] User %s failed to authenticate', this.id, JSON.stringify(this._user));\n        return callback(this._formatError('Invalid login', 'EAUTH', str, 'AUTH ' + this._authMethod));\n    }\n\n    this.logger.info('[%s] User %s authenticated', this.id, JSON.stringify(this._user));\n    this.authenticated = true;\n    callback(null, true);\n};\n\n/**\n * Handle response for a MAIL FROM: command\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionMAIL = function (str, callback) {\n    var message, curRecipient;\n    if (Number(str.charAt(0)) !== 2) {\n        if (this._usingSmtpUtf8 && /^550 /.test(str) && /[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n            message = 'Internationalized mailbox name not allowed';\n        } else {\n            message = 'Mail command failed';\n        }\n        return callback(this._formatError(message, 'EENVELOPE', str, 'MAIL FROM'));\n    }\n\n    if (!this._envelope.rcptQueue.length) {\n        return callback(this._formatError('Can\\'t send mail - no recipients defined', 'EENVELOPE', false, 'API'));\n    } else {\n        this._recipientQueue = [];\n\n        if (this._supportedExtensions.indexOf('PIPELINING') >= 0) {\n            while (this._envelope.rcptQueue.length) {\n                curRecipient = this._envelope.rcptQueue.shift();\n                this._recipientQueue.push(curRecipient);\n                this._responseActions.push(function (str) {\n                    this._actionRCPT(str, callback);\n                }.bind(this));\n                this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n            }\n        } else {\n            curRecipient = this._envelope.rcptQueue.shift();\n            this._recipientQueue.push(curRecipient);\n            this._responseActions.push(function (str) {\n                this._actionRCPT(str, callback);\n            }.bind(this));\n            this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n        }\n    }\n};\n\n/**\n * Handle response for a RCPT TO: command\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionRCPT = function (str, callback) {\n    var message, err, curRecipient = this._recipientQueue.shift();\n    if (Number(str.charAt(0)) !== 2) {\n        // this is a soft error\n        if (this._usingSmtpUtf8 && /^553 /.test(str) && /[\\x80-\\uFFFF]/.test(curRecipient)) {\n            message = 'Internationalized mailbox name not allowed';\n        } else {\n            message = 'Recipient command failed';\n        }\n        this._envelope.rejected.push(curRecipient);\n        // store error for the failed recipient\n        err = this._formatError(message, 'EENVELOPE', str, 'RCPT TO');\n        err.recipient = curRecipient;\n        this._envelope.rejectedErrors.push(err);\n    } else {\n        this._envelope.accepted.push(curRecipient);\n    }\n\n    if (!this._envelope.rcptQueue.length && !this._recipientQueue.length) {\n        if (this._envelope.rejected.length < this._envelope.to.length) {\n            this._responseActions.push(function (str) {\n                this._actionDATA(str, callback);\n            }.bind(this));\n            this._sendCommand('DATA');\n        } else {\n            err = this._formatError('Can\\'t send mail - all recipients were rejected', 'EENVELOPE', str, 'RCPT TO');\n            err.rejected = this._envelope.rejected;\n            err.rejectedErrors = this._envelope.rejectedErrors;\n            return callback(err);\n        }\n    } else if (this._envelope.rcptQueue.length) {\n        curRecipient = this._envelope.rcptQueue.shift();\n        this._recipientQueue.push(curRecipient);\n        this._responseActions.push(function (str) {\n            this._actionRCPT(str, callback);\n        }.bind(this));\n        this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n    }\n};\n\n/**\n * Handle response for a DATA command\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionDATA = function (str, callback) {\n    // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24\n    // some servers might use 250 instead, so lets check for 2 or 3 as the first digit\n    if ([2, 3].indexOf(Number(str.charAt(0))) < 0) {\n        return callback(this._formatError('Data command failed', 'EENVELOPE', str, 'DATA'));\n    }\n\n    var response = {\n        accepted: this._envelope.accepted,\n        rejected: this._envelope.rejected\n    };\n\n    if (this._envelope.rejectedErrors.length) {\n        response.rejectedErrors = this._envelope.rejectedErrors;\n    }\n\n    callback(null, response);\n};\n\n/**\n * Handle response for a DATA stream when using SMTP\n * We expect a single response that defines if the sending succeeded or failed\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionSMTPStream = function (str, callback) {\n    if (Number(str.charAt(0)) !== 2) {\n        // Message failed\n        return callback(this._formatError('Message failed', 'EMESSAGE', str, 'DATA'));\n    } else {\n        // Message sent succesfully\n        return callback(null, str);\n    }\n};\n\n/**\n * Handle response for a DATA stream\n * We expect a separate response for every recipient. All recipients can either\n * succeed or fail separately\n *\n * @param {String} recipient The recipient this response applies to\n * @param {Boolean} final Is this the final recipient?\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionLMTPStream = function (recipient, final, str, callback) {\n    var err;\n    if (Number(str.charAt(0)) !== 2) {\n        // Message failed\n        err = this._formatError('Message failed for recipient ' + recipient, 'EMESSAGE', str, 'DATA');\n        err.recipient = recipient;\n        this._envelope.rejected.push(recipient);\n        this._envelope.rejectedErrors.push(err);\n        for (var i = 0, len = this._envelope.accepted.length; i < len; i++) {\n            if (this._envelope.accepted[i] === recipient) {\n                this._envelope.accepted.splice(i, 1);\n            }\n        }\n    }\n    if (final) {\n        return callback(null, str);\n    }\n};\n\nSMTPConnection.prototype._handleXOauth2Token = function (isRetry, callback) {\n    this._responseActions.push(function (str) {\n        this._actionAUTHComplete(str, isRetry, callback);\n    }.bind(this));\n\n    if (this._auth.xoauth2 && typeof this._auth.xoauth2 === 'object') {\n        this._auth.xoauth2[isRetry ? 'generateToken' : 'getToken'](function (err, token) {\n            if (err) {\n                this.logger.info('[%s] User %s failed to authenticate', this.id, JSON.stringify(this._user));\n                return callback(this._formatError(err, 'EAUTH', false, 'AUTH XOAUTH2'));\n            }\n            this._sendCommand('AUTH XOAUTH2 ' + token);\n        }.bind(this));\n    } else {\n        this._sendCommand('AUTH XOAUTH2 ' + this._buildXOAuth2Token(this._auth.user, this._auth.xoauth2));\n    }\n};\n\n/**\n * Builds a login token for XOAUTH2 authentication command\n *\n * @param {String} user E-mail address of the user\n * @param {String} token Valid access token for the user\n * @return {String} Base64 formatted login token\n */\nSMTPConnection.prototype._buildXOAuth2Token = function (user, token) {\n    var authData = [\n        'user=' + (user || ''),\n        'auth=Bearer ' + token,\n        '',\n        ''\n    ];\n    return new Buffer(authData.join('\\x01')).toString('base64');\n};\n\nSMTPConnection.prototype._getHostname = function () {\n    // defaul hostname is machine hostname or [IP]\n    var defaultHostname = os.hostname() || '';\n\n    // ignore if not FQDN\n    if (defaultHostname.indexOf('.') < 0) {\n        defaultHostname = '[127.0.0.1]';\n    }\n\n    // IP should be enclosed in []\n    if (defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n        defaultHostname = '[' + defaultHostname + ']';\n    }\n\n    return defaultHostname;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/smtp-connection/lib/smtp-connection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/smtp-connection/package.json":
/*!***************************************************!*\
  !*** ./node_modules/smtp-connection/package.json ***!
  \***************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"smtp-connection","version":"2.12.0","description":"Connect to SMTP servers","main":"lib/smtp-connection.js","directories":{"test":"test"},"scripts":{"test":"grunt mochaTest"},"repository":{"type":"git","url":"git://github.com/andris9/smtp-connection.git"},"keywords":["SMTP"],"author":"Andris Reinman","license":"MIT","bugs":{"url":"https://github.com/andris9/smtp-connection/issues"},"homepage":"https://github.com/andris9/smtp-connection","devDependencies":{"chai":"^3.5.0","grunt":"^1.0.1","grunt-cli":"^1.2.0","grunt-eslint":"^19.0.0","grunt-mocha-test":"^0.12.7","mocha":"^3.0.2","proxy-test-server":"^1.0.0","sinon":"^1.17.5","smtp-server":"^1.14.2","xoauth2":"^1.2.0"},"dependencies":{"httpntlm":"1.6.1","nodemailer-shared":"1.1.0"}}');

/***/ })

};
;